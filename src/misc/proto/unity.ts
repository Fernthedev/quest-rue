/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: unity.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./il2cpp";
import * as pb_1 from "google-protobuf";
export class ProtoVector2 extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
        data?:
            | any[]
            | {
                  x?: number;
                  y?: number;
              }
    ) {
        super();
        pb_1.Message.initialize(
            this,
            Array.isArray(data) ? data : [],
            0,
            -1,
            [],
            this.#one_of_decls
        );
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: { x?: number; y?: number }): ProtoVector2 {
        const message = new ProtoVector2({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0) writer.writeFloat(1, this.x);
        if (this.y != 0) writer.writeFloat(2, this.y);
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoVector2 {
        const reader =
                bytes instanceof pb_1.BinaryReader
                    ? bytes
                    : new pb_1.BinaryReader(bytes),
            message = new ProtoVector2();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readFloat();
                    break;
                case 2:
                    message.y = reader.readFloat();
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProtoVector2 {
        return ProtoVector2.deserialize(bytes);
    }
}
export class ProtoVector3 extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
        data?:
            | any[]
            | {
                  x?: number;
                  y?: number;
                  z?: number;
              }
    ) {
        super();
        pb_1.Message.initialize(
            this,
            Array.isArray(data) ? data : [],
            0,
            -1,
            [],
            this.#one_of_decls
        );
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("z" in data && data.z != undefined) {
                this.z = data.z;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get z() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set z(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        z?: number;
    }): ProtoVector3 {
        const message = new ProtoVector3({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.z != null) {
            message.z = data.z;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            z?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.z != null) {
            data.z = this.z;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0) writer.writeFloat(1, this.x);
        if (this.y != 0) writer.writeFloat(2, this.y);
        if (this.z != 0) writer.writeFloat(3, this.z);
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoVector3 {
        const reader =
                bytes instanceof pb_1.BinaryReader
                    ? bytes
                    : new pb_1.BinaryReader(bytes),
            message = new ProtoVector3();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readFloat();
                    break;
                case 2:
                    message.y = reader.readFloat();
                    break;
                case 3:
                    message.z = reader.readFloat();
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProtoVector3 {
        return ProtoVector3.deserialize(bytes);
    }
}
export class ProtoVector4 extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
        data?:
            | any[]
            | {
                  x?: number;
                  y?: number;
                  z?: number;
                  w?: number;
              }
    ) {
        super();
        pb_1.Message.initialize(
            this,
            Array.isArray(data) ? data : [],
            0,
            -1,
            [],
            this.#one_of_decls
        );
        if (!Array.isArray(data) && typeof data == "object") {
            if ("x" in data && data.x != undefined) {
                this.x = data.x;
            }
            if ("y" in data && data.y != undefined) {
                this.y = data.y;
            }
            if ("z" in data && data.z != undefined) {
                this.z = data.z;
            }
            if ("w" in data && data.w != undefined) {
                this.w = data.w;
            }
        }
    }
    get x() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set x(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get y() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set y(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get z() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set z(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get w() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set w(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        x?: number;
        y?: number;
        z?: number;
        w?: number;
    }): ProtoVector4 {
        const message = new ProtoVector4({});
        if (data.x != null) {
            message.x = data.x;
        }
        if (data.y != null) {
            message.y = data.y;
        }
        if (data.z != null) {
            message.z = data.z;
        }
        if (data.w != null) {
            message.w = data.w;
        }
        return message;
    }
    toObject() {
        const data: {
            x?: number;
            y?: number;
            z?: number;
            w?: number;
        } = {};
        if (this.x != null) {
            data.x = this.x;
        }
        if (this.y != null) {
            data.y = this.y;
        }
        if (this.z != null) {
            data.z = this.z;
        }
        if (this.w != null) {
            data.w = this.w;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.x != 0) writer.writeFloat(1, this.x);
        if (this.y != 0) writer.writeFloat(2, this.y);
        if (this.z != 0) writer.writeFloat(3, this.z);
        if (this.w != 0) writer.writeFloat(4, this.w);
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoVector4 {
        const reader =
                bytes instanceof pb_1.BinaryReader
                    ? bytes
                    : new pb_1.BinaryReader(bytes),
            message = new ProtoVector4();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.x = reader.readFloat();
                    break;
                case 2:
                    message.y = reader.readFloat();
                    break;
                case 3:
                    message.z = reader.readFloat();
                    break;
                case 4:
                    message.w = reader.readFloat();
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProtoVector4 {
        return ProtoVector4.deserialize(bytes);
    }
}
export class ProtoObject extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
        data?:
            | any[]
            | {
                  address?: number;
                  name?: string;
                  classInfo?: dependency_1.ProtoClassInfo;
              }
    ) {
        super();
        pb_1.Message.initialize(
            this,
            Array.isArray(data) ? data : [],
            0,
            -1,
            [],
            this.#one_of_decls
        );
        if (!Array.isArray(data) && typeof data == "object") {
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("classInfo" in data && data.classInfo != undefined) {
                this.classInfo = data.classInfo;
            }
        }
    }
    get address() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set address(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get classInfo() {
        return pb_1.Message.getWrapperField(
            this,
            dependency_1.ProtoClassInfo,
            3
        ) as dependency_1.ProtoClassInfo;
    }
    set classInfo(value: dependency_1.ProtoClassInfo) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_classInfo() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        address?: number;
        name?: string;
        classInfo?: ReturnType<
            typeof dependency_1.ProtoClassInfo.prototype.toObject
        >;
    }): ProtoObject {
        const message = new ProtoObject({});
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.classInfo != null) {
            message.classInfo = dependency_1.ProtoClassInfo.fromObject(
                data.classInfo
            );
        }
        return message;
    }
    toObject() {
        const data: {
            address?: number;
            name?: string;
            classInfo?: ReturnType<
                typeof dependency_1.ProtoClassInfo.prototype.toObject
            >;
        } = {};
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.classInfo != null) {
            data.classInfo = this.classInfo.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.address != 0) writer.writeUint64(1, this.address);
        if (this.name.length) writer.writeString(2, this.name);
        if (this.has_classInfo)
            writer.writeMessage(3, this.classInfo, () =>
                this.classInfo.serialize(writer)
            );
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoObject {
        const reader =
                bytes instanceof pb_1.BinaryReader
                    ? bytes
                    : new pb_1.BinaryReader(bytes),
            message = new ProtoObject();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.address = reader.readUint64();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    reader.readMessage(
                        message.classInfo,
                        () =>
                            (message.classInfo =
                                dependency_1.ProtoClassInfo.deserialize(reader))
                    );
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProtoObject {
        return ProtoObject.deserialize(bytes);
    }
}
export class ProtoComponent extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
        data?:
            | any[]
            | {
                  address?: number;
                  name?: string;
                  gameObject?: number;
                  classInfo?: dependency_1.ProtoClassInfo;
              }
    ) {
        super();
        pb_1.Message.initialize(
            this,
            Array.isArray(data) ? data : [],
            0,
            -1,
            [],
            this.#one_of_decls
        );
        if (!Array.isArray(data) && typeof data == "object") {
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("gameObject" in data && data.gameObject != undefined) {
                this.gameObject = data.gameObject;
            }
            if ("classInfo" in data && data.classInfo != undefined) {
                this.classInfo = data.classInfo;
            }
        }
    }
    get address() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set address(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get gameObject() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set gameObject(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get classInfo() {
        return pb_1.Message.getWrapperField(
            this,
            dependency_1.ProtoClassInfo,
            4
        ) as dependency_1.ProtoClassInfo;
    }
    set classInfo(value: dependency_1.ProtoClassInfo) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_classInfo() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        address?: number;
        name?: string;
        gameObject?: number;
        classInfo?: ReturnType<
            typeof dependency_1.ProtoClassInfo.prototype.toObject
        >;
    }): ProtoComponent {
        const message = new ProtoComponent({});
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.gameObject != null) {
            message.gameObject = data.gameObject;
        }
        if (data.classInfo != null) {
            message.classInfo = dependency_1.ProtoClassInfo.fromObject(
                data.classInfo
            );
        }
        return message;
    }
    toObject() {
        const data: {
            address?: number;
            name?: string;
            gameObject?: number;
            classInfo?: ReturnType<
                typeof dependency_1.ProtoClassInfo.prototype.toObject
            >;
        } = {};
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.gameObject != null) {
            data.gameObject = this.gameObject;
        }
        if (this.classInfo != null) {
            data.classInfo = this.classInfo.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.address != 0) writer.writeUint64(1, this.address);
        if (this.name.length) writer.writeString(2, this.name);
        if (this.gameObject != 0) writer.writeUint64(3, this.gameObject);
        if (this.has_classInfo)
            writer.writeMessage(4, this.classInfo, () =>
                this.classInfo.serialize(writer)
            );
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoComponent {
        const reader =
                bytes instanceof pb_1.BinaryReader
                    ? bytes
                    : new pb_1.BinaryReader(bytes),
            message = new ProtoComponent();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.address = reader.readUint64();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.gameObject = reader.readUint64();
                    break;
                case 4:
                    reader.readMessage(
                        message.classInfo,
                        () =>
                            (message.classInfo =
                                dependency_1.ProtoClassInfo.deserialize(reader))
                    );
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProtoComponent {
        return ProtoComponent.deserialize(bytes);
    }
}
export class ProtoTransform extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
        data?:
            | any[]
            | {
                  address?: number;
                  name?: string;
                  childCount?: number;
                  parent?: number;
              }
    ) {
        super();
        pb_1.Message.initialize(
            this,
            Array.isArray(data) ? data : [],
            0,
            -1,
            [],
            this.#one_of_decls
        );
        if (!Array.isArray(data) && typeof data == "object") {
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("childCount" in data && data.childCount != undefined) {
                this.childCount = data.childCount;
            }
            if ("parent" in data && data.parent != undefined) {
                this.parent = data.parent;
            }
        }
    }
    get address() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set address(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get childCount() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set childCount(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get parent() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set parent(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        address?: number;
        name?: string;
        childCount?: number;
        parent?: number;
    }): ProtoTransform {
        const message = new ProtoTransform({});
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.childCount != null) {
            message.childCount = data.childCount;
        }
        if (data.parent != null) {
            message.parent = data.parent;
        }
        return message;
    }
    toObject() {
        const data: {
            address?: number;
            name?: string;
            childCount?: number;
            parent?: number;
        } = {};
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.childCount != null) {
            data.childCount = this.childCount;
        }
        if (this.parent != null) {
            data.parent = this.parent;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.address != 0) writer.writeUint64(1, this.address);
        if (this.name.length) writer.writeString(2, this.name);
        if (this.childCount != 0) writer.writeInt32(3, this.childCount);
        if (this.parent != 0) writer.writeUint64(4, this.parent);
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoTransform {
        const reader =
                bytes instanceof pb_1.BinaryReader
                    ? bytes
                    : new pb_1.BinaryReader(bytes),
            message = new ProtoTransform();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.address = reader.readUint64();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.childCount = reader.readInt32();
                    break;
                case 4:
                    message.parent = reader.readUint64();
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProtoTransform {
        return ProtoTransform.deserialize(bytes);
    }
}
export class ProtoGameObject extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
        data?:
            | any[]
            | {
                  address?: number;
                  name?: string;
                  active?: boolean;
                  layer?: number;
                  scene?: ProtoScene;
                  tag?: string;
                  transform?: ProtoTransform;
              }
    ) {
        super();
        pb_1.Message.initialize(
            this,
            Array.isArray(data) ? data : [],
            0,
            -1,
            [],
            this.#one_of_decls
        );
        if (!Array.isArray(data) && typeof data == "object") {
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("active" in data && data.active != undefined) {
                this.active = data.active;
            }
            if ("layer" in data && data.layer != undefined) {
                this.layer = data.layer;
            }
            if ("scene" in data && data.scene != undefined) {
                this.scene = data.scene;
            }
            if ("tag" in data && data.tag != undefined) {
                this.tag = data.tag;
            }
            if ("transform" in data && data.transform != undefined) {
                this.transform = data.transform;
            }
        }
    }
    get address() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set address(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get active() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set active(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get layer() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set layer(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get scene() {
        return pb_1.Message.getWrapperField(this, ProtoScene, 5) as ProtoScene;
    }
    set scene(value: ProtoScene) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_scene() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get tag() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set tag(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get transform() {
        return pb_1.Message.getWrapperField(
            this,
            ProtoTransform,
            7
        ) as ProtoTransform;
    }
    set transform(value: ProtoTransform) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_transform() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data: {
        address?: number;
        name?: string;
        active?: boolean;
        layer?: number;
        scene?: ReturnType<typeof ProtoScene.prototype.toObject>;
        tag?: string;
        transform?: ReturnType<typeof ProtoTransform.prototype.toObject>;
    }): ProtoGameObject {
        const message = new ProtoGameObject({});
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.active != null) {
            message.active = data.active;
        }
        if (data.layer != null) {
            message.layer = data.layer;
        }
        if (data.scene != null) {
            message.scene = ProtoScene.fromObject(data.scene);
        }
        if (data.tag != null) {
            message.tag = data.tag;
        }
        if (data.transform != null) {
            message.transform = ProtoTransform.fromObject(data.transform);
        }
        return message;
    }
    toObject() {
        const data: {
            address?: number;
            name?: string;
            active?: boolean;
            layer?: number;
            scene?: ReturnType<typeof ProtoScene.prototype.toObject>;
            tag?: string;
            transform?: ReturnType<typeof ProtoTransform.prototype.toObject>;
        } = {};
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.active != null) {
            data.active = this.active;
        }
        if (this.layer != null) {
            data.layer = this.layer;
        }
        if (this.scene != null) {
            data.scene = this.scene.toObject();
        }
        if (this.tag != null) {
            data.tag = this.tag;
        }
        if (this.transform != null) {
            data.transform = this.transform.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.address != 0) writer.writeUint64(1, this.address);
        if (this.name.length) writer.writeString(2, this.name);
        if (this.active != false) writer.writeBool(3, this.active);
        if (this.layer != 0) writer.writeInt32(4, this.layer);
        if (this.has_scene)
            writer.writeMessage(5, this.scene, () =>
                this.scene.serialize(writer)
            );
        if (this.tag.length) writer.writeString(6, this.tag);
        if (this.has_transform)
            writer.writeMessage(7, this.transform, () =>
                this.transform.serialize(writer)
            );
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoGameObject {
        const reader =
                bytes instanceof pb_1.BinaryReader
                    ? bytes
                    : new pb_1.BinaryReader(bytes),
            message = new ProtoGameObject();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.address = reader.readUint64();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.active = reader.readBool();
                    break;
                case 4:
                    message.layer = reader.readInt32();
                    break;
                case 5:
                    reader.readMessage(
                        message.scene,
                        () => (message.scene = ProtoScene.deserialize(reader))
                    );
                    break;
                case 6:
                    message.tag = reader.readString();
                    break;
                case 7:
                    reader.readMessage(
                        message.transform,
                        () =>
                            (message.transform =
                                ProtoTransform.deserialize(reader))
                    );
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProtoGameObject {
        return ProtoGameObject.deserialize(bytes);
    }
}
export class ProtoScene extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(
        data?:
            | any[]
            | {
                  handle?: number;
                  name?: string;
                  isLoaded?: boolean;
              }
    ) {
        super();
        pb_1.Message.initialize(
            this,
            Array.isArray(data) ? data : [],
            0,
            -1,
            [],
            this.#one_of_decls
        );
        if (!Array.isArray(data) && typeof data == "object") {
            if ("handle" in data && data.handle != undefined) {
                this.handle = data.handle;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("isLoaded" in data && data.isLoaded != undefined) {
                this.isLoaded = data.isLoaded;
            }
        }
    }
    get handle() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set handle(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get isLoaded() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set isLoaded(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        handle?: number;
        name?: string;
        isLoaded?: boolean;
    }): ProtoScene {
        const message = new ProtoScene({});
        if (data.handle != null) {
            message.handle = data.handle;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.isLoaded != null) {
            message.isLoaded = data.isLoaded;
        }
        return message;
    }
    toObject() {
        const data: {
            handle?: number;
            name?: string;
            isLoaded?: boolean;
        } = {};
        if (this.handle != null) {
            data.handle = this.handle;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.isLoaded != null) {
            data.isLoaded = this.isLoaded;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.handle != 0) writer.writeInt32(1, this.handle);
        if (this.name.length) writer.writeString(2, this.name);
        if (this.isLoaded != false) writer.writeBool(3, this.isLoaded);
        if (!w) return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProtoScene {
        const reader =
                bytes instanceof pb_1.BinaryReader
                    ? bytes
                    : new pb_1.BinaryReader(bytes),
            message = new ProtoScene();
        while (reader.nextField()) {
            if (reader.isEndGroup()) break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.handle = reader.readInt32();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.isLoaded = reader.readBool();
                    break;
                default:
                    reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProtoScene {
        return ProtoScene.deserialize(bytes);
    }
}
