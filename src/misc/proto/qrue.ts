/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/no-namespace */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: qrue.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ClassInfoMsg extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        namespaze?: string;
        clazz?: string;
        generics?: ClassInfoMsg[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("namespaze" in data && data.namespaze != undefined) {
                this.namespaze = data.namespaze;
            }
            if ("clazz" in data && data.clazz != undefined) {
                this.clazz = data.clazz;
            }
            if ("generics" in data && data.generics != undefined) {
                this.generics = data.generics;
            }
        }
    }
    get namespaze() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set namespaze(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get clazz() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set clazz(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get generics() {
        return pb_1.Message.getRepeatedWrapperField(this, ClassInfoMsg, 3) as ClassInfoMsg[];
    }
    set generics(value: ClassInfoMsg[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        namespaze?: string;
        clazz?: string;
        generics?: ReturnType<typeof ClassInfoMsg.prototype.toObject>[];
    }) {
        const message = new ClassInfoMsg({});
        if (data.namespaze != null) {
            message.namespaze = data.namespaze;
        }
        if (data.clazz != null) {
            message.clazz = data.clazz;
        }
        if (data.generics != null) {
            message.generics = data.generics.map(item => ClassInfoMsg.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            namespaze?: string;
            clazz?: string;
            generics?: ReturnType<typeof ClassInfoMsg.prototype.toObject>[];
        } = {};
        if (this.namespaze != null) {
            data.namespaze = this.namespaze;
        }
        if (this.clazz != null) {
            data.clazz = this.clazz;
        }
        if (this.generics != null) {
            data.generics = this.generics.map((item: ClassInfoMsg) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.namespaze === "string" && this.namespaze.length)
            writer.writeString(1, this.namespaze);
        if (typeof this.clazz === "string" && this.clazz.length)
            writer.writeString(2, this.clazz);
        if (this.generics !== undefined)
            writer.writeRepeatedMessage(3, this.generics, (item: ClassInfoMsg) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClassInfoMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClassInfoMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.namespaze = reader.readString();
                    break;
                case 2:
                    message.clazz = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.generics, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ClassInfoMsg.deserialize(reader), ClassInfoMsg));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ClassInfoMsg {
        return ClassInfoMsg.deserialize(bytes);
    }
}
export class StructInfoMsg extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        clazz?: ClassInfoMsg;
        contents?: Map<number, TypeInfoMsg>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("clazz" in data && data.clazz != undefined) {
                this.clazz = data.clazz;
            }
            if ("contents" in data && data.contents != undefined) {
                this.contents = data.contents;
            }
        }
        if (!this.contents)
            this.contents = new Map();
    }
    get clazz() {
        return pb_1.Message.getWrapperField(this, ClassInfoMsg, 1) as ClassInfoMsg;
    }
    set clazz(value: ClassInfoMsg) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get contents() {
        return pb_1.Message.getField(this, 2) as any as Map<number, TypeInfoMsg>;
    }
    set contents(value: Map<number, TypeInfoMsg>) {
        pb_1.Message.setField(this, 2, value as any);
    }
    static fromObject(data: {
        clazz?: ReturnType<typeof ClassInfoMsg.prototype.toObject>;
        contents?: {
            [key: number]: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
        };
    }) {
        const message = new StructInfoMsg({});
        if (data.clazz != null) {
            message.clazz = ClassInfoMsg.fromObject(data.clazz);
        }
        if (typeof data.contents == "object") {
            message.contents = new Map(Object.entries(data.contents).map(([key, value]) => [Number(key), TypeInfoMsg.fromObject(value)]));
        }
        return message;
    }
    toObject() {
        const data: {
            clazz?: ReturnType<typeof ClassInfoMsg.prototype.toObject>;
            contents?: {
                [key: number]: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
            };
        } = {};
        if (this.clazz != null) {
            data.clazz = this.clazz.toObject();
        }
        if (this.contents.size > 0) {
            data.contents = Object.fromEntries(Array.from(this.contents).map(([key, value]) => [key, value.toObject()]));
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.clazz !== undefined)
            writer.writeMessage(1, this.clazz, () => this.clazz.serialize(writer));
        for (const [key, value] of this.contents) {
            writer.writeMessage(2, this.contents, () => {
                writer.writeInt32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StructInfoMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StructInfoMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.clazz, () => message.clazz = ClassInfoMsg.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.contents as any, reader, reader.readInt32, () => {
                        let value;
                        reader.readMessage(message, () => value = TypeInfoMsg.deserialize(reader));
                        return value;
                    }));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): StructInfoMsg {
        return StructInfoMsg.deserialize(bytes);
    }
}
export class TypeInfoMsg extends pb_1.Message {
    #one_of_decls = [[1, 2, 3]];
    constructor(data?: any[] | ({} & (({
        primitiveInfo?: TypeInfoMsg.Primitive;
        structInfo?: never;
        classInfo?: never;
    } | {
        primitiveInfo?: never;
        structInfo?: StructInfoMsg;
        classInfo?: never;
    } | {
        primitiveInfo?: never;
        structInfo?: never;
        classInfo?: ClassInfoMsg;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("primitiveInfo" in data && data.primitiveInfo != undefined) {
                this.primitiveInfo = data.primitiveInfo;
            }
            if ("structInfo" in data && data.structInfo != undefined) {
                this.structInfo = data.structInfo;
            }
            if ("classInfo" in data && data.classInfo != undefined) {
                this.classInfo = data.classInfo;
            }
        }
    }
    get primitiveInfo() {
        return pb_1.Message.getField(this, 1) as TypeInfoMsg.Primitive;
    }
    set primitiveInfo(value: TypeInfoMsg.Primitive) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get structInfo() {
        return pb_1.Message.getWrapperField(this, StructInfoMsg, 2) as StructInfoMsg;
    }
    set structInfo(value: StructInfoMsg) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get classInfo() {
        return pb_1.Message.getWrapperField(this, ClassInfoMsg, 3) as ClassInfoMsg;
    }
    set classInfo(value: ClassInfoMsg) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get Info() {
        const cases: {
            [index: number]: "none" | "primitiveInfo" | "structInfo" | "classInfo";
        } = {
            0: "none",
            1: "primitiveInfo",
            2: "structInfo",
            3: "classInfo"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3])];
    }
    static fromObject(data: {
        primitiveInfo?: TypeInfoMsg.Primitive;
        structInfo?: ReturnType<typeof StructInfoMsg.prototype.toObject>;
        classInfo?: ReturnType<typeof ClassInfoMsg.prototype.toObject>;
    }) {
        const message = new TypeInfoMsg({});
        if (data.primitiveInfo != null) {
            message.primitiveInfo = data.primitiveInfo;
        }
        if (data.structInfo != null) {
            message.structInfo = StructInfoMsg.fromObject(data.structInfo);
        }
        if (data.classInfo != null) {
            message.classInfo = ClassInfoMsg.fromObject(data.classInfo);
        }
        return message;
    }
    toObject() {
        const data: {
            primitiveInfo?: TypeInfoMsg.Primitive;
            structInfo?: ReturnType<typeof StructInfoMsg.prototype.toObject>;
            classInfo?: ReturnType<typeof ClassInfoMsg.prototype.toObject>;
        } = {};
        if (this.primitiveInfo != null) {
            data.primitiveInfo = this.primitiveInfo;
        }
        if (this.structInfo != null) {
            data.structInfo = this.structInfo.toObject();
        }
        if (this.classInfo != null) {
            data.classInfo = this.classInfo.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.primitiveInfo !== undefined)
            writer.writeEnum(1, this.primitiveInfo);
        if (this.structInfo !== undefined)
            writer.writeMessage(2, this.structInfo, () => this.structInfo.serialize(writer));
        if (this.classInfo !== undefined)
            writer.writeMessage(3, this.classInfo, () => this.classInfo.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TypeInfoMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TypeInfoMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.primitiveInfo = reader.readEnum();
                    break;
                case 2:
                    reader.readMessage(message.structInfo, () => message.structInfo = StructInfoMsg.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.classInfo, () => message.classInfo = ClassInfoMsg.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TypeInfoMsg {
        return TypeInfoMsg.deserialize(bytes);
    }
}
export namespace TypeInfoMsg {
    export enum Type {
        PRIMITIVE = 0,
        STRUCT = 1,
        CLASS = 2
    }
    export enum Primitive {
        BOOLEAN = 0,
        CHAR = 1,
        INT = 2,
        LONG = 3,
        FLOAT = 4,
        DOUBLE = 5,
        STRING = 6
    }
}
export class FieldInfoMsg extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        name?: string;
        id?: number;
        type?: TypeInfoMsg;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get type() {
        return pb_1.Message.getWrapperField(this, TypeInfoMsg, 3) as TypeInfoMsg;
    }
    set type(value: TypeInfoMsg) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    static fromObject(data: {
        name?: string;
        id?: number;
        type?: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
    }) {
        const message = new FieldInfoMsg({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.type != null) {
            message.type = TypeInfoMsg.fromObject(data.type);
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            id?: number;
            type?: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.type != null) {
            data.type = this.type.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (this.id !== undefined)
            writer.writeUint64(2, this.id);
        if (this.type !== undefined)
            writer.writeMessage(3, this.type, () => this.type.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FieldInfoMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FieldInfoMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.id = reader.readUint64();
                    break;
                case 3:
                    reader.readMessage(message.type, () => message.type = TypeInfoMsg.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FieldInfoMsg {
        return FieldInfoMsg.deserialize(bytes);
    }
}
export class PropertyInfoMsg extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        name?: string;
        hasGet?: boolean;
        getId?: number;
        hasSet?: boolean;
        setId?: number;
        type?: TypeInfoMsg;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("hasGet" in data && data.hasGet != undefined) {
                this.hasGet = data.hasGet;
            }
            if ("getId" in data && data.getId != undefined) {
                this.getId = data.getId;
            }
            if ("hasSet" in data && data.hasSet != undefined) {
                this.hasSet = data.hasSet;
            }
            if ("setId" in data && data.setId != undefined) {
                this.setId = data.setId;
            }
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get hasGet() {
        return pb_1.Message.getField(this, 2) as boolean;
    }
    set hasGet(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    get getId() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set getId(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get hasSet() {
        return pb_1.Message.getField(this, 4) as boolean;
    }
    set hasSet(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get setId() {
        return pb_1.Message.getField(this, 5) as number;
    }
    set setId(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get type() {
        return pb_1.Message.getWrapperField(this, TypeInfoMsg, 6) as TypeInfoMsg;
    }
    set type(value: TypeInfoMsg) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    static fromObject(data: {
        name?: string;
        hasGet?: boolean;
        getId?: number;
        hasSet?: boolean;
        setId?: number;
        type?: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
    }) {
        const message = new PropertyInfoMsg({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.hasGet != null) {
            message.hasGet = data.hasGet;
        }
        if (data.getId != null) {
            message.getId = data.getId;
        }
        if (data.hasSet != null) {
            message.hasSet = data.hasSet;
        }
        if (data.setId != null) {
            message.setId = data.setId;
        }
        if (data.type != null) {
            message.type = TypeInfoMsg.fromObject(data.type);
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            hasGet?: boolean;
            getId?: number;
            hasSet?: boolean;
            setId?: number;
            type?: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.hasGet != null) {
            data.hasGet = this.hasGet;
        }
        if (this.getId != null) {
            data.getId = this.getId;
        }
        if (this.hasSet != null) {
            data.hasSet = this.hasSet;
        }
        if (this.setId != null) {
            data.setId = this.setId;
        }
        if (this.type != null) {
            data.type = this.type.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (this.hasGet !== undefined)
            writer.writeBool(2, this.hasGet);
        if (this.getId !== undefined)
            writer.writeUint64(3, this.getId);
        if (this.hasSet !== undefined)
            writer.writeBool(4, this.hasSet);
        if (this.setId !== undefined)
            writer.writeUint64(5, this.setId);
        if (this.type !== undefined)
            writer.writeMessage(6, this.type, () => this.type.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PropertyInfoMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PropertyInfoMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.hasGet = reader.readBool();
                    break;
                case 3:
                    message.getId = reader.readUint64();
                    break;
                case 4:
                    message.hasSet = reader.readBool();
                    break;
                case 5:
                    message.setId = reader.readUint64();
                    break;
                case 6:
                    reader.readMessage(message.type, () => message.type = TypeInfoMsg.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PropertyInfoMsg {
        return PropertyInfoMsg.deserialize(bytes);
    }
}
export class MethodInfoMsg extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        name?: string;
        id?: number;
        args?: Map<string, TypeInfoMsg>;
        returnType?: TypeInfoMsg;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
            if ("returnType" in data && data.returnType != undefined) {
                this.returnType = data.returnType;
            }
        }
        if (!this.args)
            this.args = new Map();
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get id() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get args() {
        return pb_1.Message.getField(this, 3) as any as Map<string, TypeInfoMsg>;
    }
    set args(value: Map<string, TypeInfoMsg>) {
        pb_1.Message.setField(this, 3, value as any);
    }
    get returnType() {
        return pb_1.Message.getWrapperField(this, TypeInfoMsg, 4) as TypeInfoMsg;
    }
    set returnType(value: TypeInfoMsg) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    static fromObject(data: {
        name?: string;
        id?: number;
        args?: {
            [key: string]: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
        };
        returnType?: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
    }) {
        const message = new MethodInfoMsg({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        if (typeof data.args == "object") {
            message.args = new Map(Object.entries(data.args).map(([key, value]) => [key, TypeInfoMsg.fromObject(value)]));
        }
        if (data.returnType != null) {
            message.returnType = TypeInfoMsg.fromObject(data.returnType);
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            id?: number;
            args?: {
                [key: string]: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
            };
            returnType?: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.args.size > 0) {
            data.args = Object.fromEntries(Array.from(this.args).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.returnType != null) {
            data.returnType = this.returnType.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (this.id !== undefined)
            writer.writeUint64(2, this.id);
        for (const [key, value] of this.args) {
            writer.writeMessage(3, this.args, () => {
                writer.writeString(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.returnType !== undefined)
            writer.writeMessage(4, this.returnType, () => this.returnType.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MethodInfoMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MethodInfoMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.id = reader.readUint64();
                    break;
                case 3:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.args as any, reader, reader.readString, () => {
                        let value;
                        reader.readMessage(message, () => value = TypeInfoMsg.deserialize(reader));
                        return value;
                    }));
                    break;
                case 4:
                    reader.readMessage(message.returnType, () => message.returnType = TypeInfoMsg.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MethodInfoMsg {
        return MethodInfoMsg.deserialize(bytes);
    }
}
export class TypeDetailsMsg extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        clazz?: ClassInfoMsg;
        fields?: FieldInfoMsg[];
        properties?: PropertyInfoMsg[];
        methods?: MethodInfoMsg[];
        interfaces?: ClassInfoMsg[];
        parent?: TypeDetailsMsg;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4, 5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("clazz" in data && data.clazz != undefined) {
                this.clazz = data.clazz;
            }
            if ("fields" in data && data.fields != undefined) {
                this.fields = data.fields;
            }
            if ("properties" in data && data.properties != undefined) {
                this.properties = data.properties;
            }
            if ("methods" in data && data.methods != undefined) {
                this.methods = data.methods;
            }
            if ("interfaces" in data && data.interfaces != undefined) {
                this.interfaces = data.interfaces;
            }
            if ("parent" in data && data.parent != undefined) {
                this.parent = data.parent;
            }
        }
    }
    get clazz() {
        return pb_1.Message.getWrapperField(this, ClassInfoMsg, 1) as ClassInfoMsg;
    }
    set clazz(value: ClassInfoMsg) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get fields() {
        return pb_1.Message.getRepeatedWrapperField(this, FieldInfoMsg, 2) as FieldInfoMsg[];
    }
    set fields(value: FieldInfoMsg[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    get properties() {
        return pb_1.Message.getRepeatedWrapperField(this, PropertyInfoMsg, 3) as PropertyInfoMsg[];
    }
    set properties(value: PropertyInfoMsg[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get methods() {
        return pb_1.Message.getRepeatedWrapperField(this, MethodInfoMsg, 4) as MethodInfoMsg[];
    }
    set methods(value: MethodInfoMsg[]) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get interfaces() {
        return pb_1.Message.getRepeatedWrapperField(this, ClassInfoMsg, 5) as ClassInfoMsg[];
    }
    set interfaces(value: ClassInfoMsg[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get parent() {
        return pb_1.Message.getWrapperField(this, TypeDetailsMsg, 6) as TypeDetailsMsg;
    }
    set parent(value: TypeDetailsMsg) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    static fromObject(data: {
        clazz?: ReturnType<typeof ClassInfoMsg.prototype.toObject>;
        fields?: ReturnType<typeof FieldInfoMsg.prototype.toObject>[];
        properties?: ReturnType<typeof PropertyInfoMsg.prototype.toObject>[];
        methods?: ReturnType<typeof MethodInfoMsg.prototype.toObject>[];
        interfaces?: ReturnType<typeof ClassInfoMsg.prototype.toObject>[];
        parent?: ReturnType<typeof TypeDetailsMsg.prototype.toObject>;
    }) {
        const message = new TypeDetailsMsg({});
        if (data.clazz != null) {
            message.clazz = ClassInfoMsg.fromObject(data.clazz);
        }
        if (data.fields != null) {
            message.fields = data.fields.map(item => FieldInfoMsg.fromObject(item));
        }
        if (data.properties != null) {
            message.properties = data.properties.map(item => PropertyInfoMsg.fromObject(item));
        }
        if (data.methods != null) {
            message.methods = data.methods.map(item => MethodInfoMsg.fromObject(item));
        }
        if (data.interfaces != null) {
            message.interfaces = data.interfaces.map(item => ClassInfoMsg.fromObject(item));
        }
        if (data.parent != null) {
            message.parent = TypeDetailsMsg.fromObject(data.parent);
        }
        return message;
    }
    toObject() {
        const data: {
            clazz?: ReturnType<typeof ClassInfoMsg.prototype.toObject>;
            fields?: ReturnType<typeof FieldInfoMsg.prototype.toObject>[];
            properties?: ReturnType<typeof PropertyInfoMsg.prototype.toObject>[];
            methods?: ReturnType<typeof MethodInfoMsg.prototype.toObject>[];
            interfaces?: ReturnType<typeof ClassInfoMsg.prototype.toObject>[];
            parent?: ReturnType<typeof TypeDetailsMsg.prototype.toObject>;
        } = {};
        if (this.clazz != null) {
            data.clazz = this.clazz.toObject();
        }
        if (this.fields != null) {
            data.fields = this.fields.map((item: FieldInfoMsg) => item.toObject());
        }
        if (this.properties != null) {
            data.properties = this.properties.map((item: PropertyInfoMsg) => item.toObject());
        }
        if (this.methods != null) {
            data.methods = this.methods.map((item: MethodInfoMsg) => item.toObject());
        }
        if (this.interfaces != null) {
            data.interfaces = this.interfaces.map((item: ClassInfoMsg) => item.toObject());
        }
        if (this.parent != null) {
            data.parent = this.parent.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.clazz !== undefined)
            writer.writeMessage(1, this.clazz, () => this.clazz.serialize(writer));
        if (this.fields !== undefined)
            writer.writeRepeatedMessage(2, this.fields, (item: FieldInfoMsg) => item.serialize(writer));
        if (this.properties !== undefined)
            writer.writeRepeatedMessage(3, this.properties, (item: PropertyInfoMsg) => item.serialize(writer));
        if (this.methods !== undefined)
            writer.writeRepeatedMessage(4, this.methods, (item: MethodInfoMsg) => item.serialize(writer));
        if (this.interfaces !== undefined)
            writer.writeRepeatedMessage(5, this.interfaces, (item: ClassInfoMsg) => item.serialize(writer));
        if (this.parent !== undefined)
            writer.writeMessage(6, this.parent, () => this.parent.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TypeDetailsMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TypeDetailsMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.clazz, () => message.clazz = ClassInfoMsg.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 2, FieldInfoMsg.deserialize(reader), FieldInfoMsg));
                    break;
                case 3:
                    reader.readMessage(message.properties, () => pb_1.Message.addToRepeatedWrapperField(message, 3, PropertyInfoMsg.deserialize(reader), PropertyInfoMsg));
                    break;
                case 4:
                    reader.readMessage(message.methods, () => pb_1.Message.addToRepeatedWrapperField(message, 4, MethodInfoMsg.deserialize(reader), MethodInfoMsg));
                    break;
                case 5:
                    reader.readMessage(message.interfaces, () => pb_1.Message.addToRepeatedWrapperField(message, 5, ClassInfoMsg.deserialize(reader), ClassInfoMsg));
                    break;
                case 6:
                    reader.readMessage(message.parent, () => message.parent = TypeDetailsMsg.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TypeDetailsMsg {
        return TypeDetailsMsg.deserialize(bytes);
    }
}
export class DataMsg extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        typeInfo?: TypeInfoMsg;
        data?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("typeInfo" in data && data.typeInfo != undefined) {
                this.typeInfo = data.typeInfo;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get typeInfo() {
        return pb_1.Message.getWrapperField(this, TypeInfoMsg, 1) as TypeInfoMsg;
    }
    set typeInfo(value: TypeInfoMsg) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get data() {
        return pb_1.Message.getField(this, 2) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        typeInfo?: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
        data?: Uint8Array;
    }) {
        const message = new DataMsg({});
        if (data.typeInfo != null) {
            message.typeInfo = TypeInfoMsg.fromObject(data.typeInfo);
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            typeInfo?: ReturnType<typeof TypeInfoMsg.prototype.toObject>;
            data?: Uint8Array;
        } = {};
        if (this.typeInfo != null) {
            data.typeInfo = this.typeInfo.toObject();
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.typeInfo !== undefined)
            writer.writeMessage(1, this.typeInfo, () => this.typeInfo.serialize(writer));
        if (this.data !== undefined)
            writer.writeBytes(2, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DataMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DataMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.typeInfo, () => message.typeInfo = TypeInfoMsg.deserialize(reader));
                    break;
                case 2:
                    message.data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DataMsg {
        return DataMsg.deserialize(bytes);
    }
}
export class ComponentMsg extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        name?: string;
        classInfo?: ClassInfoMsg;
        pointer?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("classInfo" in data && data.classInfo != undefined) {
                this.classInfo = data.classInfo;
            }
            if ("pointer" in data && data.pointer != undefined) {
                this.pointer = data.pointer;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get classInfo() {
        return pb_1.Message.getWrapperField(this, ClassInfoMsg, 2) as ClassInfoMsg;
    }
    set classInfo(value: ClassInfoMsg) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get pointer() {
        return pb_1.Message.getField(this, 3) as Uint8Array;
    }
    set pointer(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        name?: string;
        classInfo?: ReturnType<typeof ClassInfoMsg.prototype.toObject>;
        pointer?: Uint8Array;
    }) {
        const message = new ComponentMsg({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.classInfo != null) {
            message.classInfo = ClassInfoMsg.fromObject(data.classInfo);
        }
        if (data.pointer != null) {
            message.pointer = data.pointer;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            classInfo?: ReturnType<typeof ClassInfoMsg.prototype.toObject>;
            pointer?: Uint8Array;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.classInfo != null) {
            data.classInfo = this.classInfo.toObject();
        }
        if (this.pointer != null) {
            data.pointer = this.pointer;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (this.classInfo !== undefined)
            writer.writeMessage(2, this.classInfo, () => this.classInfo.serialize(writer));
        if (this.pointer !== undefined)
            writer.writeBytes(3, this.pointer);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ComponentMsg {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ComponentMsg();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    reader.readMessage(message.classInfo, () => message.classInfo = ClassInfoMsg.deserialize(reader));
                    break;
                case 3:
                    message.pointer = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ComponentMsg {
        return ComponentMsg.deserialize(bytes);
    }
}
export class Scene extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get name() {
        return pb_1.Message.getField(this, 1) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        name?: string;
    }) {
        const message = new Scene({});
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(1, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Scene {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Scene();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Scene {
        return Scene.deserialize(bytes);
    }
}
export class GameObject extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        scene?: Scene;
        name?: string;
        parentId?: number;
        childrenIds?: number[];
        active?: boolean;
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("scene" in data && data.scene != undefined) {
                this.scene = data.scene;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("parentId" in data && data.parentId != undefined) {
                this.parentId = data.parentId;
            }
            if ("childrenIds" in data && data.childrenIds != undefined) {
                this.childrenIds = data.childrenIds;
            }
            if ("active" in data && data.active != undefined) {
                this.active = data.active;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get scene() {
        return pb_1.Message.getWrapperField(this, Scene, 1) as Scene;
    }
    set scene(value: Scene) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get parentId() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set parentId(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get childrenIds() {
        return pb_1.Message.getField(this, 4) as number[];
    }
    set childrenIds(value: number[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get active() {
        return pb_1.Message.getField(this, 5) as boolean;
    }
    set active(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get id() {
        return pb_1.Message.getField(this, 6) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        scene?: ReturnType<typeof Scene.prototype.toObject>;
        name?: string;
        parentId?: number;
        childrenIds?: number[];
        active?: boolean;
        id?: number;
    }) {
        const message = new GameObject({});
        if (data.scene != null) {
            message.scene = Scene.fromObject(data.scene);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.parentId != null) {
            message.parentId = data.parentId;
        }
        if (data.childrenIds != null) {
            message.childrenIds = data.childrenIds;
        }
        if (data.active != null) {
            message.active = data.active;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            scene?: ReturnType<typeof Scene.prototype.toObject>;
            name?: string;
            parentId?: number;
            childrenIds?: number[];
            active?: boolean;
            id?: number;
        } = {};
        if (this.scene != null) {
            data.scene = this.scene.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.parentId != null) {
            data.parentId = this.parentId;
        }
        if (this.childrenIds != null) {
            data.childrenIds = this.childrenIds;
        }
        if (this.active != null) {
            data.active = this.active;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.scene !== undefined)
            writer.writeMessage(1, this.scene, () => this.scene.serialize(writer));
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(2, this.name);
        if (this.parentId !== undefined)
            writer.writeInt32(3, this.parentId);
        if (this.childrenIds !== undefined)
            writer.writePackedInt32(4, this.childrenIds);
        if (this.active !== undefined)
            writer.writeBool(5, this.active);
        if (this.id !== undefined)
            writer.writeInt32(6, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameObject {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameObject();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.scene, () => message.scene = Scene.deserialize(reader));
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.parentId = reader.readInt32();
                    break;
                case 4:
                    message.childrenIds = reader.readPackedInt32();
                    break;
                case 5:
                    message.active = reader.readBool();
                    break;
                case 6:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GameObject {
        return GameObject.deserialize(bytes);
    }
}
export class InvokeMethod extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        methodId?: number;
        invokeUUID?: number;
        args?: DataMsg[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("methodId" in data && data.methodId != undefined) {
                this.methodId = data.methodId;
            }
            if ("invokeUUID" in data && data.invokeUUID != undefined) {
                this.invokeUUID = data.invokeUUID;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
        }
    }
    get methodId() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set methodId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get invokeUUID() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set invokeUUID(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get args() {
        return pb_1.Message.getRepeatedWrapperField(this, DataMsg, 3) as DataMsg[];
    }
    set args(value: DataMsg[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
        methodId?: number;
        invokeUUID?: number;
        args?: ReturnType<typeof DataMsg.prototype.toObject>[];
    }) {
        const message = new InvokeMethod({});
        if (data.methodId != null) {
            message.methodId = data.methodId;
        }
        if (data.invokeUUID != null) {
            message.invokeUUID = data.invokeUUID;
        }
        if (data.args != null) {
            message.args = data.args.map(item => DataMsg.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            methodId?: number;
            invokeUUID?: number;
            args?: ReturnType<typeof DataMsg.prototype.toObject>[];
        } = {};
        if (this.methodId != null) {
            data.methodId = this.methodId;
        }
        if (this.invokeUUID != null) {
            data.invokeUUID = this.invokeUUID;
        }
        if (this.args != null) {
            data.args = this.args.map((item: DataMsg) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.methodId !== undefined)
            writer.writeUint64(1, this.methodId);
        if (this.invokeUUID !== undefined)
            writer.writeUint64(2, this.invokeUUID);
        if (this.args !== undefined)
            writer.writeRepeatedMessage(3, this.args, (item: DataMsg) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeMethod {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeMethod();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.methodId = reader.readUint64();
                    break;
                case 2:
                    message.invokeUUID = reader.readUint64();
                    break;
                case 3:
                    reader.readMessage(message.args, () => pb_1.Message.addToRepeatedWrapperField(message, 3, DataMsg.deserialize(reader), DataMsg));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InvokeMethod {
        return InvokeMethod.deserialize(bytes);
    }
}
export class InvokeMethodResult extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        status?: InvokeMethodResult.Status;
        methodId?: number;
        invokeUUID?: number;
        result?: DataMsg;
        error?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("methodId" in data && data.methodId != undefined) {
                this.methodId = data.methodId;
            }
            if ("invokeUUID" in data && data.invokeUUID != undefined) {
                this.invokeUUID = data.invokeUUID;
            }
            if ("result" in data && data.result != undefined) {
                this.result = data.result;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get status() {
        return pb_1.Message.getField(this, 1) as InvokeMethodResult.Status;
    }
    set status(value: InvokeMethodResult.Status) {
        pb_1.Message.setField(this, 1, value);
    }
    get methodId() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set methodId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get invokeUUID() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set invokeUUID(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get result() {
        return pb_1.Message.getWrapperField(this, DataMsg, 4) as DataMsg;
    }
    set result(value: DataMsg) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get error() {
        return pb_1.Message.getField(this, 5) as string;
    }
    set error(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        status?: InvokeMethodResult.Status;
        methodId?: number;
        invokeUUID?: number;
        result?: ReturnType<typeof DataMsg.prototype.toObject>;
        error?: string;
    }) {
        const message = new InvokeMethodResult({});
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.methodId != null) {
            message.methodId = data.methodId;
        }
        if (data.invokeUUID != null) {
            message.invokeUUID = data.invokeUUID;
        }
        if (data.result != null) {
            message.result = DataMsg.fromObject(data.result);
        }
        if (data.error != null) {
            message.error = data.error;
        }
        return message;
    }
    toObject() {
        const data: {
            status?: InvokeMethodResult.Status;
            methodId?: number;
            invokeUUID?: number;
            result?: ReturnType<typeof DataMsg.prototype.toObject>;
            error?: string;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.methodId != null) {
            data.methodId = this.methodId;
        }
        if (this.invokeUUID != null) {
            data.invokeUUID = this.invokeUUID;
        }
        if (this.result != null) {
            data.result = this.result.toObject();
        }
        if (this.error != null) {
            data.error = this.error;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status !== undefined)
            writer.writeEnum(1, this.status);
        if (this.methodId !== undefined)
            writer.writeUint64(2, this.methodId);
        if (this.invokeUUID !== undefined)
            writer.writeUint64(3, this.invokeUUID);
        if (this.result !== undefined)
            writer.writeMessage(4, this.result, () => this.result.serialize(writer));
        if (typeof this.error === "string" && this.error.length)
            writer.writeString(5, this.error);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeMethodResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeMethodResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readEnum();
                    break;
                case 2:
                    message.methodId = reader.readUint64();
                    break;
                case 3:
                    message.invokeUUID = reader.readUint64();
                    break;
                case 4:
                    reader.readMessage(message.result, () => message.result = DataMsg.deserialize(reader));
                    break;
                case 5:
                    message.error = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InvokeMethodResult {
        return InvokeMethodResult.deserialize(bytes);
    }
}
export namespace InvokeMethodResult {
    export enum Status {
        OK = 0,
        ERR = 1,
        NOT_FOUND = 2
    }
}
export class SearchComponents extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        queryId?: number;
        componentClass?: ClassInfoMsg;
        componentName?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("queryId" in data && data.queryId != undefined) {
                this.queryId = data.queryId;
            }
            if ("componentClass" in data && data.componentClass != undefined) {
                this.componentClass = data.componentClass;
            }
            if ("componentName" in data && data.componentName != undefined) {
                this.componentName = data.componentName;
            }
        }
    }
    get queryId() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set queryId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get componentClass() {
        return pb_1.Message.getWrapperField(this, ClassInfoMsg, 2) as ClassInfoMsg;
    }
    set componentClass(value: ClassInfoMsg) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get componentName() {
        return pb_1.Message.getField(this, 3) as string;
    }
    set componentName(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        queryId?: number;
        componentClass?: ReturnType<typeof ClassInfoMsg.prototype.toObject>;
        componentName?: string;
    }) {
        const message = new SearchComponents({});
        if (data.queryId != null) {
            message.queryId = data.queryId;
        }
        if (data.componentClass != null) {
            message.componentClass = ClassInfoMsg.fromObject(data.componentClass);
        }
        if (data.componentName != null) {
            message.componentName = data.componentName;
        }
        return message;
    }
    toObject() {
        const data: {
            queryId?: number;
            componentClass?: ReturnType<typeof ClassInfoMsg.prototype.toObject>;
            componentName?: string;
        } = {};
        if (this.queryId != null) {
            data.queryId = this.queryId;
        }
        if (this.componentClass != null) {
            data.componentClass = this.componentClass.toObject();
        }
        if (this.componentName != null) {
            data.componentName = this.componentName;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.queryId !== undefined)
            writer.writeUint64(1, this.queryId);
        if (this.componentClass !== undefined)
            writer.writeMessage(2, this.componentClass, () => this.componentClass.serialize(writer));
        if (typeof this.componentName === "string" && this.componentName.length)
            writer.writeString(3, this.componentName);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchComponents {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchComponents();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.queryId = reader.readUint64();
                    break;
                case 2:
                    reader.readMessage(message.componentClass, () => message.componentClass = ClassInfoMsg.deserialize(reader));
                    break;
                case 3:
                    message.componentName = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchComponents {
        return SearchComponents.deserialize(bytes);
    }
}
export class SearchComponentsResult extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        queryId?: number;
        foundComponents?: ComponentMsg[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("queryId" in data && data.queryId != undefined) {
                this.queryId = data.queryId;
            }
            if ("foundComponents" in data && data.foundComponents != undefined) {
                this.foundComponents = data.foundComponents;
            }
        }
    }
    get queryId() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set queryId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get foundComponents() {
        return pb_1.Message.getRepeatedWrapperField(this, ComponentMsg, 2) as ComponentMsg[];
    }
    set foundComponents(value: ComponentMsg[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        queryId?: number;
        foundComponents?: ReturnType<typeof ComponentMsg.prototype.toObject>[];
    }) {
        const message = new SearchComponentsResult({});
        if (data.queryId != null) {
            message.queryId = data.queryId;
        }
        if (data.foundComponents != null) {
            message.foundComponents = data.foundComponents.map(item => ComponentMsg.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            queryId?: number;
            foundComponents?: ReturnType<typeof ComponentMsg.prototype.toObject>[];
        } = {};
        if (this.queryId != null) {
            data.queryId = this.queryId;
        }
        if (this.foundComponents != null) {
            data.foundComponents = this.foundComponents.map((item: ComponentMsg) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.queryId !== undefined)
            writer.writeUint64(1, this.queryId);
        if (this.foundComponents !== undefined)
            writer.writeRepeatedMessage(2, this.foundComponents, (item: ComponentMsg) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchComponentsResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchComponentsResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.queryId = reader.readUint64();
                    break;
                case 2:
                    reader.readMessage(message.foundComponents, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ComponentMsg.deserialize(reader), ComponentMsg));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchComponentsResult {
        return SearchComponentsResult.deserialize(bytes);
    }
}
export class FindGameObjects extends pb_1.Message {
    #one_of_decls = [[5, 6]];
    constructor(data?: any[] | ({
        queryId?: number;
        nameFilter?: string;
        parentFilter?: GameObject;
        sceneFilter?: Scene;
        mustBeActive?: boolean;
    } & (({
        onlyRootObjects?: boolean;
        allowNonSceneObjects?: never;
    } | {
        onlyRootObjects?: never;
        allowNonSceneObjects?: boolean;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("queryId" in data && data.queryId != undefined) {
                this.queryId = data.queryId;
            }
            if ("nameFilter" in data && data.nameFilter != undefined) {
                this.nameFilter = data.nameFilter;
            }
            if ("parentFilter" in data && data.parentFilter != undefined) {
                this.parentFilter = data.parentFilter;
            }
            if ("sceneFilter" in data && data.sceneFilter != undefined) {
                this.sceneFilter = data.sceneFilter;
            }
            if ("onlyRootObjects" in data && data.onlyRootObjects != undefined) {
                this.onlyRootObjects = data.onlyRootObjects;
            }
            if ("allowNonSceneObjects" in data && data.allowNonSceneObjects != undefined) {
                this.allowNonSceneObjects = data.allowNonSceneObjects;
            }
            if ("mustBeActive" in data && data.mustBeActive != undefined) {
                this.mustBeActive = data.mustBeActive;
            }
        }
    }
    get queryId() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set queryId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get nameFilter() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set nameFilter(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get parentFilter() {
        return pb_1.Message.getWrapperField(this, GameObject, 3) as GameObject;
    }
    set parentFilter(value: GameObject) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get sceneFilter() {
        return pb_1.Message.getWrapperField(this, Scene, 4) as Scene;
    }
    set sceneFilter(value: Scene) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get onlyRootObjects() {
        return pb_1.Message.getField(this, 5) as boolean;
    }
    set onlyRootObjects(value: boolean) {
        pb_1.Message.setOneofField(this, 5, this.#one_of_decls[0], value);
    }
    get allowNonSceneObjects() {
        return pb_1.Message.getField(this, 6) as boolean;
    }
    set allowNonSceneObjects(value: boolean) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[0], value);
    }
    get mustBeActive() {
        return pb_1.Message.getField(this, 7) as boolean;
    }
    set mustBeActive(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get sceneObjectFilter() {
        const cases: {
            [index: number]: "none" | "onlyRootObjects" | "allowNonSceneObjects";
        } = {
            0: "none",
            5: "onlyRootObjects",
            6: "allowNonSceneObjects"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5, 6])];
    }
    static fromObject(data: {
        queryId?: number;
        nameFilter?: string;
        parentFilter?: ReturnType<typeof GameObject.prototype.toObject>;
        sceneFilter?: ReturnType<typeof Scene.prototype.toObject>;
        onlyRootObjects?: boolean;
        allowNonSceneObjects?: boolean;
        mustBeActive?: boolean;
    }) {
        const message = new FindGameObjects({});
        if (data.queryId != null) {
            message.queryId = data.queryId;
        }
        if (data.nameFilter != null) {
            message.nameFilter = data.nameFilter;
        }
        if (data.parentFilter != null) {
            message.parentFilter = GameObject.fromObject(data.parentFilter);
        }
        if (data.sceneFilter != null) {
            message.sceneFilter = Scene.fromObject(data.sceneFilter);
        }
        if (data.onlyRootObjects != null) {
            message.onlyRootObjects = data.onlyRootObjects;
        }
        if (data.allowNonSceneObjects != null) {
            message.allowNonSceneObjects = data.allowNonSceneObjects;
        }
        if (data.mustBeActive != null) {
            message.mustBeActive = data.mustBeActive;
        }
        return message;
    }
    toObject() {
        const data: {
            queryId?: number;
            nameFilter?: string;
            parentFilter?: ReturnType<typeof GameObject.prototype.toObject>;
            sceneFilter?: ReturnType<typeof Scene.prototype.toObject>;
            onlyRootObjects?: boolean;
            allowNonSceneObjects?: boolean;
            mustBeActive?: boolean;
        } = {};
        if (this.queryId != null) {
            data.queryId = this.queryId;
        }
        if (this.nameFilter != null) {
            data.nameFilter = this.nameFilter;
        }
        if (this.parentFilter != null) {
            data.parentFilter = this.parentFilter.toObject();
        }
        if (this.sceneFilter != null) {
            data.sceneFilter = this.sceneFilter.toObject();
        }
        if (this.onlyRootObjects != null) {
            data.onlyRootObjects = this.onlyRootObjects;
        }
        if (this.allowNonSceneObjects != null) {
            data.allowNonSceneObjects = this.allowNonSceneObjects;
        }
        if (this.mustBeActive != null) {
            data.mustBeActive = this.mustBeActive;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.queryId !== undefined)
            writer.writeUint64(1, this.queryId);
        if (typeof this.nameFilter === "string" && this.nameFilter.length)
            writer.writeString(2, this.nameFilter);
        if (this.parentFilter !== undefined)
            writer.writeMessage(3, this.parentFilter, () => this.parentFilter.serialize(writer));
        if (this.sceneFilter !== undefined)
            writer.writeMessage(4, this.sceneFilter, () => this.sceneFilter.serialize(writer));
        if (this.onlyRootObjects !== undefined)
            writer.writeBool(5, this.onlyRootObjects);
        if (this.allowNonSceneObjects !== undefined)
            writer.writeBool(6, this.allowNonSceneObjects);
        if (this.mustBeActive !== undefined)
            writer.writeBool(7, this.mustBeActive);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindGameObjects {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindGameObjects();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.queryId = reader.readUint64();
                    break;
                case 2:
                    message.nameFilter = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.parentFilter, () => message.parentFilter = GameObject.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.sceneFilter, () => message.sceneFilter = Scene.deserialize(reader));
                    break;
                case 5:
                    message.onlyRootObjects = reader.readBool();
                    break;
                case 6:
                    message.allowNonSceneObjects = reader.readBool();
                    break;
                case 7:
                    message.mustBeActive = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FindGameObjects {
        return FindGameObjects.deserialize(bytes);
    }
}
export class FindGameObjectsResult extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        queryId?: number;
        foundObjects?: GameObject[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("queryId" in data && data.queryId != undefined) {
                this.queryId = data.queryId;
            }
            if ("foundObjects" in data && data.foundObjects != undefined) {
                this.foundObjects = data.foundObjects;
            }
        }
    }
    get queryId() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set queryId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get foundObjects() {
        return pb_1.Message.getRepeatedWrapperField(this, GameObject, 2) as GameObject[];
    }
    set foundObjects(value: GameObject[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        queryId?: number;
        foundObjects?: ReturnType<typeof GameObject.prototype.toObject>[];
    }) {
        const message = new FindGameObjectsResult({});
        if (data.queryId != null) {
            message.queryId = data.queryId;
        }
        if (data.foundObjects != null) {
            message.foundObjects = data.foundObjects.map(item => GameObject.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            queryId?: number;
            foundObjects?: ReturnType<typeof GameObject.prototype.toObject>[];
        } = {};
        if (this.queryId != null) {
            data.queryId = this.queryId;
        }
        if (this.foundObjects != null) {
            data.foundObjects = this.foundObjects.map((item: GameObject) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.queryId !== undefined)
            writer.writeUint64(1, this.queryId);
        if (this.foundObjects !== undefined)
            writer.writeRepeatedMessage(2, this.foundObjects, (item: GameObject) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FindGameObjectsResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FindGameObjectsResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.queryId = reader.readUint64();
                    break;
                case 2:
                    reader.readMessage(message.foundObjects, () => pb_1.Message.addToRepeatedWrapperField(message, 2, GameObject.deserialize(reader), GameObject));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FindGameObjectsResult {
        return FindGameObjectsResult.deserialize(bytes);
    }
}
export class LoadObject extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        loadId?: number;
        pointer?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("loadId" in data && data.loadId != undefined) {
                this.loadId = data.loadId;
            }
            if ("pointer" in data && data.pointer != undefined) {
                this.pointer = data.pointer;
            }
        }
    }
    get loadId() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set loadId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get pointer() {
        return pb_1.Message.getField(this, 2) as Uint8Array;
    }
    set pointer(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        loadId?: number;
        pointer?: Uint8Array;
    }) {
        const message = new LoadObject({});
        if (data.loadId != null) {
            message.loadId = data.loadId;
        }
        if (data.pointer != null) {
            message.pointer = data.pointer;
        }
        return message;
    }
    toObject() {
        const data: {
            loadId?: number;
            pointer?: Uint8Array;
        } = {};
        if (this.loadId != null) {
            data.loadId = this.loadId;
        }
        if (this.pointer != null) {
            data.pointer = this.pointer;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.loadId !== undefined)
            writer.writeUint64(1, this.loadId);
        if (this.pointer !== undefined)
            writer.writeBytes(2, this.pointer);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoadObject {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoadObject();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.loadId = reader.readUint64();
                    break;
                case 2:
                    message.pointer = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoadObject {
        return LoadObject.deserialize(bytes);
    }
}
export class LoadObjectResult extends pb_1.Message {
    #one_of_decls = [];
    constructor(data?: any[] | {
        loadId?: number;
        object?: TypeDetailsMsg;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("loadId" in data && data.loadId != undefined) {
                this.loadId = data.loadId;
            }
            if ("object" in data && data.object != undefined) {
                this.object = data.object;
            }
        }
    }
    get loadId() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set loadId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get object() {
        return pb_1.Message.getWrapperField(this, TypeDetailsMsg, 2) as TypeDetailsMsg;
    }
    set object(value: TypeDetailsMsg) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    static fromObject(data: {
        loadId?: number;
        object?: ReturnType<typeof TypeDetailsMsg.prototype.toObject>;
    }) {
        const message = new LoadObjectResult({});
        if (data.loadId != null) {
            message.loadId = data.loadId;
        }
        if (data.object != null) {
            message.object = TypeDetailsMsg.fromObject(data.object);
        }
        return message;
    }
    toObject() {
        const data: {
            loadId?: number;
            object?: ReturnType<typeof TypeDetailsMsg.prototype.toObject>;
        } = {};
        if (this.loadId != null) {
            data.loadId = this.loadId;
        }
        if (this.object != null) {
            data.object = this.object.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.loadId !== undefined)
            writer.writeUint64(1, this.loadId);
        if (this.object !== undefined)
            writer.writeMessage(2, this.object, () => this.object.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoadObjectResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoadObjectResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.loadId = reader.readUint64();
                    break;
                case 2:
                    reader.readMessage(message.object, () => message.object = TypeDetailsMsg.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoadObjectResult {
        return LoadObjectResult.deserialize(bytes);
    }
}
export class PacketWrapper extends pb_1.Message {
    #one_of_decls = [[1, 2, 3, 4, 5, 6, 7, 8]];
    constructor(data?: any[] | ({} & (({
        invokeMethod?: InvokeMethod;
        invokeMethodResult?: never;
        searchComponents?: never;
        searchComponentsResult?: never;
        loadObject?: never;
        loadObjectResult?: never;
        findGameObject?: never;
        findGameObjectResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: InvokeMethodResult;
        searchComponents?: never;
        searchComponentsResult?: never;
        loadObject?: never;
        loadObjectResult?: never;
        findGameObject?: never;
        findGameObjectResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchComponents?: SearchComponents;
        searchComponentsResult?: never;
        loadObject?: never;
        loadObjectResult?: never;
        findGameObject?: never;
        findGameObjectResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchComponents?: never;
        searchComponentsResult?: SearchComponentsResult;
        loadObject?: never;
        loadObjectResult?: never;
        findGameObject?: never;
        findGameObjectResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchComponents?: never;
        searchComponentsResult?: never;
        loadObject?: LoadObject;
        loadObjectResult?: never;
        findGameObject?: never;
        findGameObjectResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchComponents?: never;
        searchComponentsResult?: never;
        loadObject?: never;
        loadObjectResult?: LoadObjectResult;
        findGameObject?: never;
        findGameObjectResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchComponents?: never;
        searchComponentsResult?: never;
        loadObject?: never;
        loadObjectResult?: never;
        findGameObject?: FindGameObjects;
        findGameObjectResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchComponents?: never;
        searchComponentsResult?: never;
        loadObject?: never;
        loadObjectResult?: never;
        findGameObject?: never;
        findGameObjectResult?: FindGameObjectsResult;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("invokeMethod" in data && data.invokeMethod != undefined) {
                this.invokeMethod = data.invokeMethod;
            }
            if ("invokeMethodResult" in data && data.invokeMethodResult != undefined) {
                this.invokeMethodResult = data.invokeMethodResult;
            }
            if ("searchComponents" in data && data.searchComponents != undefined) {
                this.searchComponents = data.searchComponents;
            }
            if ("searchComponentsResult" in data && data.searchComponentsResult != undefined) {
                this.searchComponentsResult = data.searchComponentsResult;
            }
            if ("loadObject" in data && data.loadObject != undefined) {
                this.loadObject = data.loadObject;
            }
            if ("loadObjectResult" in data && data.loadObjectResult != undefined) {
                this.loadObjectResult = data.loadObjectResult;
            }
            if ("findGameObject" in data && data.findGameObject != undefined) {
                this.findGameObject = data.findGameObject;
            }
            if ("findGameObjectResult" in data && data.findGameObjectResult != undefined) {
                this.findGameObjectResult = data.findGameObjectResult;
            }
        }
    }
    get invokeMethod() {
        return pb_1.Message.getWrapperField(this, InvokeMethod, 1) as InvokeMethod;
    }
    set invokeMethod(value: InvokeMethod) {
        pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
    }
    get invokeMethodResult() {
        return pb_1.Message.getWrapperField(this, InvokeMethodResult, 2) as InvokeMethodResult;
    }
    set invokeMethodResult(value: InvokeMethodResult) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get searchComponents() {
        return pb_1.Message.getWrapperField(this, SearchComponents, 3) as SearchComponents;
    }
    set searchComponents(value: SearchComponents) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get searchComponentsResult() {
        return pb_1.Message.getWrapperField(this, SearchComponentsResult, 4) as SearchComponentsResult;
    }
    set searchComponentsResult(value: SearchComponentsResult) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get loadObject() {
        return pb_1.Message.getWrapperField(this, LoadObject, 5) as LoadObject;
    }
    set loadObject(value: LoadObject) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get loadObjectResult() {
        return pb_1.Message.getWrapperField(this, LoadObjectResult, 6) as LoadObjectResult;
    }
    set loadObjectResult(value: LoadObjectResult) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get findGameObject() {
        return pb_1.Message.getWrapperField(this, FindGameObjects, 7) as FindGameObjects;
    }
    set findGameObject(value: FindGameObjects) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get findGameObjectResult() {
        return pb_1.Message.getWrapperField(this, FindGameObjectsResult, 8) as FindGameObjectsResult;
    }
    set findGameObjectResult(value: FindGameObjectsResult) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
    }
    get Packet() {
        const cases: {
            [index: number]: "none" | "invokeMethod" | "invokeMethodResult" | "searchComponents" | "searchComponentsResult" | "loadObject" | "loadObjectResult" | "findGameObject" | "findGameObjectResult";
        } = {
            0: "none",
            1: "invokeMethod",
            2: "invokeMethodResult",
            3: "searchComponents",
            4: "searchComponentsResult",
            5: "loadObject",
            6: "loadObjectResult",
            7: "findGameObject",
            8: "findGameObjectResult"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2, 3, 4, 5, 6, 7, 8])];
    }
    static fromObject(data: {
        invokeMethod?: ReturnType<typeof InvokeMethod.prototype.toObject>;
        invokeMethodResult?: ReturnType<typeof InvokeMethodResult.prototype.toObject>;
        searchComponents?: ReturnType<typeof SearchComponents.prototype.toObject>;
        searchComponentsResult?: ReturnType<typeof SearchComponentsResult.prototype.toObject>;
        loadObject?: ReturnType<typeof LoadObject.prototype.toObject>;
        loadObjectResult?: ReturnType<typeof LoadObjectResult.prototype.toObject>;
        findGameObject?: ReturnType<typeof FindGameObjects.prototype.toObject>;
        findGameObjectResult?: ReturnType<typeof FindGameObjectsResult.prototype.toObject>;
    }) {
        const message = new PacketWrapper({});
        if (data.invokeMethod != null) {
            message.invokeMethod = InvokeMethod.fromObject(data.invokeMethod);
        }
        if (data.invokeMethodResult != null) {
            message.invokeMethodResult = InvokeMethodResult.fromObject(data.invokeMethodResult);
        }
        if (data.searchComponents != null) {
            message.searchComponents = SearchComponents.fromObject(data.searchComponents);
        }
        if (data.searchComponentsResult != null) {
            message.searchComponentsResult = SearchComponentsResult.fromObject(data.searchComponentsResult);
        }
        if (data.loadObject != null) {
            message.loadObject = LoadObject.fromObject(data.loadObject);
        }
        if (data.loadObjectResult != null) {
            message.loadObjectResult = LoadObjectResult.fromObject(data.loadObjectResult);
        }
        if (data.findGameObject != null) {
            message.findGameObject = FindGameObjects.fromObject(data.findGameObject);
        }
        if (data.findGameObjectResult != null) {
            message.findGameObjectResult = FindGameObjectsResult.fromObject(data.findGameObjectResult);
        }
        return message;
    }
    toObject() {
        const data: {
            invokeMethod?: ReturnType<typeof InvokeMethod.prototype.toObject>;
            invokeMethodResult?: ReturnType<typeof InvokeMethodResult.prototype.toObject>;
            searchComponents?: ReturnType<typeof SearchComponents.prototype.toObject>;
            searchComponentsResult?: ReturnType<typeof SearchComponentsResult.prototype.toObject>;
            loadObject?: ReturnType<typeof LoadObject.prototype.toObject>;
            loadObjectResult?: ReturnType<typeof LoadObjectResult.prototype.toObject>;
            findGameObject?: ReturnType<typeof FindGameObjects.prototype.toObject>;
            findGameObjectResult?: ReturnType<typeof FindGameObjectsResult.prototype.toObject>;
        } = {};
        if (this.invokeMethod != null) {
            data.invokeMethod = this.invokeMethod.toObject();
        }
        if (this.invokeMethodResult != null) {
            data.invokeMethodResult = this.invokeMethodResult.toObject();
        }
        if (this.searchComponents != null) {
            data.searchComponents = this.searchComponents.toObject();
        }
        if (this.searchComponentsResult != null) {
            data.searchComponentsResult = this.searchComponentsResult.toObject();
        }
        if (this.loadObject != null) {
            data.loadObject = this.loadObject.toObject();
        }
        if (this.loadObjectResult != null) {
            data.loadObjectResult = this.loadObjectResult.toObject();
        }
        if (this.findGameObject != null) {
            data.findGameObject = this.findGameObject.toObject();
        }
        if (this.findGameObjectResult != null) {
            data.findGameObjectResult = this.findGameObjectResult.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.invokeMethod !== undefined)
            writer.writeMessage(1, this.invokeMethod, () => this.invokeMethod.serialize(writer));
        if (this.invokeMethodResult !== undefined)
            writer.writeMessage(2, this.invokeMethodResult, () => this.invokeMethodResult.serialize(writer));
        if (this.searchComponents !== undefined)
            writer.writeMessage(3, this.searchComponents, () => this.searchComponents.serialize(writer));
        if (this.searchComponentsResult !== undefined)
            writer.writeMessage(4, this.searchComponentsResult, () => this.searchComponentsResult.serialize(writer));
        if (this.loadObject !== undefined)
            writer.writeMessage(5, this.loadObject, () => this.loadObject.serialize(writer));
        if (this.loadObjectResult !== undefined)
            writer.writeMessage(6, this.loadObjectResult, () => this.loadObjectResult.serialize(writer));
        if (this.findGameObject !== undefined)
            writer.writeMessage(7, this.findGameObject, () => this.findGameObject.serialize(writer));
        if (this.findGameObjectResult !== undefined)
            writer.writeMessage(8, this.findGameObjectResult, () => this.findGameObjectResult.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketWrapper {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketWrapper();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.invokeMethod, () => message.invokeMethod = InvokeMethod.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.invokeMethodResult, () => message.invokeMethodResult = InvokeMethodResult.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.searchComponents, () => message.searchComponents = SearchComponents.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.searchComponentsResult, () => message.searchComponentsResult = SearchComponentsResult.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.loadObject, () => message.loadObject = LoadObject.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.loadObjectResult, () => message.loadObjectResult = LoadObjectResult.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.findGameObject, () => message.findGameObject = FindGameObjects.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.findGameObjectResult, () => message.findGameObjectResult = FindGameObjectsResult.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PacketWrapper {
        return PacketWrapper.deserialize(bytes);
    }
}
