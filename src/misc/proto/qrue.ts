/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: qrue.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./il2cpp";
import * as dependency_2 from "./unity";
import * as pb_1 from "google-protobuf";
export class InvokeMethod extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        methodId?: number;
        args?: dependency_1.ProtoDataPayload[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("methodId" in data && data.methodId != undefined) {
                this.methodId = data.methodId;
            }
            if ("args" in data && data.args != undefined) {
                this.args = data.args;
            }
        }
    }
    get methodId() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set methodId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get args() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ProtoDataPayload, 2) as dependency_1.ProtoDataPayload[];
    }
    set args(value: dependency_1.ProtoDataPayload[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        methodId?: number;
        args?: ReturnType<typeof dependency_1.ProtoDataPayload.prototype.toObject>[];
    }): InvokeMethod {
        const message = new InvokeMethod({});
        if (data.methodId != null) {
            message.methodId = data.methodId;
        }
        if (data.args != null) {
            message.args = data.args.map(item => dependency_1.ProtoDataPayload.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            methodId?: number;
            args?: ReturnType<typeof dependency_1.ProtoDataPayload.prototype.toObject>[];
        } = {};
        if (this.methodId != null) {
            data.methodId = this.methodId;
        }
        if (this.args != null) {
            data.args = this.args.map((item: dependency_1.ProtoDataPayload) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.methodId !== undefined)
            writer.writeUint64(1, this.methodId);
        if (this.args !== undefined)
            writer.writeRepeatedMessage(2, this.args, (item: dependency_1.ProtoDataPayload) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeMethod {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeMethod();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.methodId = reader.readUint64();
                    break;
                case 2:
                    reader.readMessage(message.args, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.ProtoDataPayload.deserialize(reader), dependency_1.ProtoDataPayload));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InvokeMethod {
        return InvokeMethod.deserialize(bytes);
    }
}
export class InvokeMethodResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        status?: InvokeMethodResult.Status;
        methodId?: number;
        result?: dependency_1.ProtoDataPayload;
        error?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("methodId" in data && data.methodId != undefined) {
                this.methodId = data.methodId;
            }
            if ("result" in data && data.result != undefined) {
                this.result = data.result;
            }
            if ("error" in data && data.error != undefined) {
                this.error = data.error;
            }
        }
    }
    get status() {
        return pb_1.Message.getField(this, 1) as InvokeMethodResult.Status;
    }
    set status(value: InvokeMethodResult.Status) {
        pb_1.Message.setField(this, 1, value);
    }
    get methodId() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set methodId(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get result() {
        return pb_1.Message.getWrapperField(this, dependency_1.ProtoDataPayload, 4) as dependency_1.ProtoDataPayload;
    }
    set result(value: dependency_1.ProtoDataPayload) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get error() {
        return pb_1.Message.getField(this, 5) as string;
    }
    set error(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        status?: InvokeMethodResult.Status;
        methodId?: number;
        result?: ReturnType<typeof dependency_1.ProtoDataPayload.prototype.toObject>;
        error?: string;
    }): InvokeMethodResult {
        const message = new InvokeMethodResult({});
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.methodId != null) {
            message.methodId = data.methodId;
        }
        if (data.result != null) {
            message.result = dependency_1.ProtoDataPayload.fromObject(data.result);
        }
        if (data.error != null) {
            message.error = data.error;
        }
        return message;
    }
    toObject() {
        const data: {
            status?: InvokeMethodResult.Status;
            methodId?: number;
            result?: ReturnType<typeof dependency_1.ProtoDataPayload.prototype.toObject>;
            error?: string;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.methodId != null) {
            data.methodId = this.methodId;
        }
        if (this.result != null) {
            data.result = this.result.toObject();
        }
        if (this.error != null) {
            data.error = this.error;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status !== undefined)
            writer.writeEnum(1, this.status);
        if (this.methodId !== undefined)
            writer.writeUint64(2, this.methodId);
        if (this.result !== undefined)
            writer.writeMessage(4, this.result, () => this.result.serialize(writer));
        if (typeof this.error === "string" && this.error.length)
            writer.writeString(5, this.error);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InvokeMethodResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvokeMethodResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readEnum();
                    break;
                case 2:
                    message.methodId = reader.readUint64();
                    break;
                case 4:
                    reader.readMessage(message.result, () => message.result = dependency_1.ProtoDataPayload.deserialize(reader));
                    break;
                case 5:
                    message.error = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InvokeMethodResult {
        return InvokeMethodResult.deserialize(bytes);
    }
}
export namespace InvokeMethodResult {
    export enum Status {
        ERR = 0,
        OK = 1,
        NOT_FOUND = 2
    }
}
export class SearchObjects extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        componentClass?: dependency_1.ProtoClassInfo;
        name?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("componentClass" in data && data.componentClass != undefined) {
                this.componentClass = data.componentClass;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
        }
    }
    get componentClass() {
        return pb_1.Message.getWrapperField(this, dependency_1.ProtoClassInfo, 1) as dependency_1.ProtoClassInfo;
    }
    set componentClass(value: dependency_1.ProtoClassInfo) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getField(this, 2) as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        componentClass?: ReturnType<typeof dependency_1.ProtoClassInfo.prototype.toObject>;
        name?: string;
    }): SearchObjects {
        const message = new SearchObjects({});
        if (data.componentClass != null) {
            message.componentClass = dependency_1.ProtoClassInfo.fromObject(data.componentClass);
        }
        if (data.name != null) {
            message.name = data.name;
        }
        return message;
    }
    toObject() {
        const data: {
            componentClass?: ReturnType<typeof dependency_1.ProtoClassInfo.prototype.toObject>;
            name?: string;
        } = {};
        if (this.componentClass != null) {
            data.componentClass = this.componentClass.toObject();
        }
        if (this.name != null) {
            data.name = this.name;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.componentClass !== undefined)
            writer.writeMessage(1, this.componentClass, () => this.componentClass.serialize(writer));
        if (typeof this.name === "string" && this.name.length)
            writer.writeString(2, this.name);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchObjects {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchObjects();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.componentClass, () => message.componentClass = dependency_1.ProtoClassInfo.deserialize(reader));
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchObjects {
        return SearchObjects.deserialize(bytes);
    }
}
export class SearchObjectsResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        objects?: dependency_2.ProtoObject[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("objects" in data && data.objects != undefined) {
                this.objects = data.objects;
            }
        }
    }
    get objects() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ProtoObject, 1) as dependency_2.ProtoObject[];
    }
    set objects(value: dependency_2.ProtoObject[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        objects?: ReturnType<typeof dependency_2.ProtoObject.prototype.toObject>[];
    }): SearchObjectsResult {
        const message = new SearchObjectsResult({});
        if (data.objects != null) {
            message.objects = data.objects.map(item => dependency_2.ProtoObject.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            objects?: ReturnType<typeof dependency_2.ProtoObject.prototype.toObject>[];
        } = {};
        if (this.objects != null) {
            data.objects = this.objects.map((item: dependency_2.ProtoObject) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.objects !== undefined)
            writer.writeRepeatedMessage(1, this.objects, (item: dependency_2.ProtoObject) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchObjectsResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchObjectsResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.objects, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.ProtoObject.deserialize(reader), dependency_2.ProtoObject));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchObjectsResult {
        return SearchObjectsResult.deserialize(bytes);
    }
}
export class GetAllGameObjects extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): GetAllGameObjects {
        const message = new GetAllGameObjects({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllGameObjects {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllGameObjects();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAllGameObjects {
        return GetAllGameObjects.deserialize(bytes);
    }
}
export class GetAllGameObjectsResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        objects?: dependency_2.ProtoGameObject[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("objects" in data && data.objects != undefined) {
                this.objects = data.objects;
            }
        }
    }
    get objects() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ProtoGameObject, 1) as dependency_2.ProtoGameObject[];
    }
    set objects(value: dependency_2.ProtoGameObject[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        objects?: ReturnType<typeof dependency_2.ProtoGameObject.prototype.toObject>[];
    }): GetAllGameObjectsResult {
        const message = new GetAllGameObjectsResult({});
        if (data.objects != null) {
            message.objects = data.objects.map(item => dependency_2.ProtoGameObject.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            objects?: ReturnType<typeof dependency_2.ProtoGameObject.prototype.toObject>[];
        } = {};
        if (this.objects != null) {
            data.objects = this.objects.map((item: dependency_2.ProtoGameObject) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.objects !== undefined)
            writer.writeRepeatedMessage(1, this.objects, (item: dependency_2.ProtoGameObject) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAllGameObjectsResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAllGameObjectsResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.objects, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.ProtoGameObject.deserialize(reader), dependency_2.ProtoGameObject));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAllGameObjectsResult {
        return GetAllGameObjectsResult.deserialize(bytes);
    }
}
export class GetGameObjectComponents extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        address?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
        }
    }
    get address() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set address(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        address?: number;
    }): GetGameObjectComponents {
        const message = new GetGameObjectComponents({});
        if (data.address != null) {
            message.address = data.address;
        }
        return message;
    }
    toObject() {
        const data: {
            address?: number;
        } = {};
        if (this.address != null) {
            data.address = this.address;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.address !== undefined)
            writer.writeUint64(1, this.address);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGameObjectComponents {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGameObjectComponents();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.address = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetGameObjectComponents {
        return GetGameObjectComponents.deserialize(bytes);
    }
}
export class GetGameObjectComponentsResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        components?: dependency_2.ProtoComponent[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("components" in data && data.components != undefined) {
                this.components = data.components;
            }
        }
    }
    get components() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ProtoComponent, 1) as dependency_2.ProtoComponent[];
    }
    set components(value: dependency_2.ProtoComponent[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        components?: ReturnType<typeof dependency_2.ProtoComponent.prototype.toObject>[];
    }): GetGameObjectComponentsResult {
        const message = new GetGameObjectComponentsResult({});
        if (data.components != null) {
            message.components = data.components.map(item => dependency_2.ProtoComponent.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            components?: ReturnType<typeof dependency_2.ProtoComponent.prototype.toObject>[];
        } = {};
        if (this.components != null) {
            data.components = this.components.map((item: dependency_2.ProtoComponent) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.components !== undefined)
            writer.writeRepeatedMessage(1, this.components, (item: dependency_2.ProtoComponent) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetGameObjectComponentsResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetGameObjectComponentsResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.components, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.ProtoComponent.deserialize(reader), dependency_2.ProtoComponent));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetGameObjectComponentsResult {
        return GetGameObjectComponentsResult.deserialize(bytes);
    }
}
export class ReadMemory extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        address?: number;
        size?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("size" in data && data.size != undefined) {
                this.size = data.size;
            }
        }
    }
    get address() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set address(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get size() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set size(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        address?: number;
        size?: number;
    }): ReadMemory {
        const message = new ReadMemory({});
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.size != null) {
            message.size = data.size;
        }
        return message;
    }
    toObject() {
        const data: {
            address?: number;
            size?: number;
        } = {};
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.size != null) {
            data.size = this.size;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.address !== undefined)
            writer.writeUint64(1, this.address);
        if (this.size !== undefined)
            writer.writeUint64(2, this.size);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadMemory {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadMemory();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.address = reader.readUint64();
                    break;
                case 2:
                    message.size = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReadMemory {
        return ReadMemory.deserialize(bytes);
    }
}
export class ReadMemoryResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        status?: ReadMemoryResult.Status;
        address?: number;
        data?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get status() {
        return pb_1.Message.getField(this, 1) as ReadMemoryResult.Status;
    }
    set status(value: ReadMemoryResult.Status) {
        pb_1.Message.setField(this, 1, value);
    }
    get address() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set address(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getField(this, 3) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        status?: ReadMemoryResult.Status;
        address?: number;
        data?: Uint8Array;
    }): ReadMemoryResult {
        const message = new ReadMemoryResult({});
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            status?: ReadMemoryResult.Status;
            address?: number;
            data?: Uint8Array;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status !== undefined)
            writer.writeEnum(1, this.status);
        if (this.address !== undefined)
            writer.writeUint64(2, this.address);
        if (this.data !== undefined)
            writer.writeBytes(3, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ReadMemoryResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ReadMemoryResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readEnum();
                    break;
                case 2:
                    message.address = reader.readUint64();
                    break;
                case 3:
                    message.data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ReadMemoryResult {
        return ReadMemoryResult.deserialize(bytes);
    }
}
export namespace ReadMemoryResult {
    export enum Status {
        ERR = 0,
        OK = 1
    }
}
export class WriteMemory extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        address?: number;
        data?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get address() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set address(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get data() {
        return pb_1.Message.getField(this, 2) as Uint8Array;
    }
    set data(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        address?: number;
        data?: Uint8Array;
    }): WriteMemory {
        const message = new WriteMemory({});
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        return message;
    }
    toObject() {
        const data: {
            address?: number;
            data?: Uint8Array;
        } = {};
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.address !== undefined)
            writer.writeUint64(1, this.address);
        if (this.data !== undefined)
            writer.writeBytes(2, this.data);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteMemory {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteMemory();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.address = reader.readUint64();
                    break;
                case 2:
                    message.data = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WriteMemory {
        return WriteMemory.deserialize(bytes);
    }
}
export class WriteMemoryResult extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        status?: WriteMemoryResult.Status;
        address?: number;
        size?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("size" in data && data.size != undefined) {
                this.size = data.size;
            }
        }
    }
    get status() {
        return pb_1.Message.getField(this, 1) as WriteMemoryResult.Status;
    }
    set status(value: WriteMemoryResult.Status) {
        pb_1.Message.setField(this, 1, value);
    }
    get address() {
        return pb_1.Message.getField(this, 2) as number;
    }
    set address(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get size() {
        return pb_1.Message.getField(this, 3) as number;
    }
    set size(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        status?: WriteMemoryResult.Status;
        address?: number;
        size?: number;
    }): WriteMemoryResult {
        const message = new WriteMemoryResult({});
        if (data.status != null) {
            message.status = data.status;
        }
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.size != null) {
            message.size = data.size;
        }
        return message;
    }
    toObject() {
        const data: {
            status?: WriteMemoryResult.Status;
            address?: number;
            size?: number;
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.size != null) {
            data.size = this.size;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status !== undefined)
            writer.writeEnum(1, this.status);
        if (this.address !== undefined)
            writer.writeUint64(2, this.address);
        if (this.size !== undefined)
            writer.writeUint64(3, this.size);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): WriteMemoryResult {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WriteMemoryResult();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readEnum();
                    break;
                case 2:
                    message.address = reader.readUint64();
                    break;
                case 3:
                    message.size = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): WriteMemoryResult {
        return WriteMemoryResult.deserialize(bytes);
    }
}
export namespace WriteMemoryResult {
    export enum Status {
        ERR = 0,
        OK = 1
    }
}
export class PacketWrapper extends pb_1.Message {
    #one_of_decls: number[][] = [[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]];
    constructor(data?: any[] | ({
        queryResultId?: number;
    } & (({
        invokeMethod?: InvokeMethod;
        invokeMethodResult?: never;
        searchObjects?: never;
        searchObjectsResult?: never;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: never;
        readMemory?: never;
        readMemoryResult?: never;
        writeMemory?: never;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: InvokeMethodResult;
        searchObjects?: never;
        searchObjectsResult?: never;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: never;
        readMemory?: never;
        readMemoryResult?: never;
        writeMemory?: never;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchObjects?: SearchObjects;
        searchObjectsResult?: never;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: never;
        readMemory?: never;
        readMemoryResult?: never;
        writeMemory?: never;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchObjects?: never;
        searchObjectsResult?: SearchObjectsResult;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: never;
        readMemory?: never;
        readMemoryResult?: never;
        writeMemory?: never;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchObjects?: never;
        searchObjectsResult?: never;
        getAllGameObjects?: GetAllGameObjects;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: never;
        readMemory?: never;
        readMemoryResult?: never;
        writeMemory?: never;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchObjects?: never;
        searchObjectsResult?: never;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: GetAllGameObjectsResult;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: never;
        readMemory?: never;
        readMemoryResult?: never;
        writeMemory?: never;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchObjects?: never;
        searchObjectsResult?: never;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: GetGameObjectComponents;
        getGameObjectComponentsResult?: never;
        readMemory?: never;
        readMemoryResult?: never;
        writeMemory?: never;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchObjects?: never;
        searchObjectsResult?: never;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: GetGameObjectComponentsResult;
        readMemory?: never;
        readMemoryResult?: never;
        writeMemory?: never;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchObjects?: never;
        searchObjectsResult?: never;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: never;
        readMemory?: ReadMemory;
        readMemoryResult?: never;
        writeMemory?: never;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchObjects?: never;
        searchObjectsResult?: never;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: never;
        readMemory?: never;
        readMemoryResult?: ReadMemoryResult;
        writeMemory?: never;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchObjects?: never;
        searchObjectsResult?: never;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: never;
        readMemory?: never;
        readMemoryResult?: never;
        writeMemory?: WriteMemory;
        writeMemoryResult?: never;
    } | {
        invokeMethod?: never;
        invokeMethodResult?: never;
        searchObjects?: never;
        searchObjectsResult?: never;
        getAllGameObjects?: never;
        getAllGameObjectsResult?: never;
        getGameObjectComponents?: never;
        getGameObjectComponentsResult?: never;
        readMemory?: never;
        readMemoryResult?: never;
        writeMemory?: never;
        writeMemoryResult?: WriteMemoryResult;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("queryResultId" in data && data.queryResultId != undefined) {
                this.queryResultId = data.queryResultId;
            }
            if ("invokeMethod" in data && data.invokeMethod != undefined) {
                this.invokeMethod = data.invokeMethod;
            }
            if ("invokeMethodResult" in data && data.invokeMethodResult != undefined) {
                this.invokeMethodResult = data.invokeMethodResult;
            }
            if ("searchObjects" in data && data.searchObjects != undefined) {
                this.searchObjects = data.searchObjects;
            }
            if ("searchObjectsResult" in data && data.searchObjectsResult != undefined) {
                this.searchObjectsResult = data.searchObjectsResult;
            }
            if ("getAllGameObjects" in data && data.getAllGameObjects != undefined) {
                this.getAllGameObjects = data.getAllGameObjects;
            }
            if ("getAllGameObjectsResult" in data && data.getAllGameObjectsResult != undefined) {
                this.getAllGameObjectsResult = data.getAllGameObjectsResult;
            }
            if ("getGameObjectComponents" in data && data.getGameObjectComponents != undefined) {
                this.getGameObjectComponents = data.getGameObjectComponents;
            }
            if ("getGameObjectComponentsResult" in data && data.getGameObjectComponentsResult != undefined) {
                this.getGameObjectComponentsResult = data.getGameObjectComponentsResult;
            }
            if ("readMemory" in data && data.readMemory != undefined) {
                this.readMemory = data.readMemory;
            }
            if ("readMemoryResult" in data && data.readMemoryResult != undefined) {
                this.readMemoryResult = data.readMemoryResult;
            }
            if ("writeMemory" in data && data.writeMemory != undefined) {
                this.writeMemory = data.writeMemory;
            }
            if ("writeMemoryResult" in data && data.writeMemoryResult != undefined) {
                this.writeMemoryResult = data.writeMemoryResult;
            }
        }
    }
    get queryResultId() {
        return pb_1.Message.getField(this, 1) as number;
    }
    set queryResultId(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get invokeMethod() {
        return pb_1.Message.getWrapperField(this, InvokeMethod, 2) as InvokeMethod;
    }
    set invokeMethod(value: InvokeMethod) {
        pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
    }
    get invokeMethodResult() {
        return pb_1.Message.getWrapperField(this, InvokeMethodResult, 3) as InvokeMethodResult;
    }
    set invokeMethodResult(value: InvokeMethodResult) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[0], value);
    }
    get searchObjects() {
        return pb_1.Message.getWrapperField(this, SearchObjects, 4) as SearchObjects;
    }
    set searchObjects(value: SearchObjects) {
        pb_1.Message.setOneofWrapperField(this, 4, this.#one_of_decls[0], value);
    }
    get searchObjectsResult() {
        return pb_1.Message.getWrapperField(this, SearchObjectsResult, 5) as SearchObjectsResult;
    }
    set searchObjectsResult(value: SearchObjectsResult) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[0], value);
    }
    get getAllGameObjects() {
        return pb_1.Message.getWrapperField(this, GetAllGameObjects, 6) as GetAllGameObjects;
    }
    set getAllGameObjects(value: GetAllGameObjects) {
        pb_1.Message.setOneofWrapperField(this, 6, this.#one_of_decls[0], value);
    }
    get getAllGameObjectsResult() {
        return pb_1.Message.getWrapperField(this, GetAllGameObjectsResult, 7) as GetAllGameObjectsResult;
    }
    set getAllGameObjectsResult(value: GetAllGameObjectsResult) {
        pb_1.Message.setOneofWrapperField(this, 7, this.#one_of_decls[0], value);
    }
    get getGameObjectComponents() {
        return pb_1.Message.getWrapperField(this, GetGameObjectComponents, 8) as GetGameObjectComponents;
    }
    set getGameObjectComponents(value: GetGameObjectComponents) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[0], value);
    }
    get getGameObjectComponentsResult() {
        return pb_1.Message.getWrapperField(this, GetGameObjectComponentsResult, 9) as GetGameObjectComponentsResult;
    }
    set getGameObjectComponentsResult(value: GetGameObjectComponentsResult) {
        pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
    }
    get readMemory() {
        return pb_1.Message.getWrapperField(this, ReadMemory, 10) as ReadMemory;
    }
    set readMemory(value: ReadMemory) {
        pb_1.Message.setOneofWrapperField(this, 10, this.#one_of_decls[0], value);
    }
    get readMemoryResult() {
        return pb_1.Message.getWrapperField(this, ReadMemoryResult, 11) as ReadMemoryResult;
    }
    set readMemoryResult(value: ReadMemoryResult) {
        pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
    }
    get writeMemory() {
        return pb_1.Message.getWrapperField(this, WriteMemory, 12) as WriteMemory;
    }
    set writeMemory(value: WriteMemory) {
        pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
    }
    get writeMemoryResult() {
        return pb_1.Message.getWrapperField(this, WriteMemoryResult, 13) as WriteMemoryResult;
    }
    set writeMemoryResult(value: WriteMemoryResult) {
        pb_1.Message.setOneofWrapperField(this, 13, this.#one_of_decls[0], value);
    }
    get Packet() {
        const cases: {
            [index: number]: "none" | "invokeMethod" | "invokeMethodResult" | "searchObjects" | "searchObjectsResult" | "getAllGameObjects" | "getAllGameObjectsResult" | "getGameObjectComponents" | "getGameObjectComponentsResult" | "readMemory" | "readMemoryResult" | "writeMemory" | "writeMemoryResult";
        } = {
            0: "none",
            2: "invokeMethod",
            3: "invokeMethodResult",
            4: "searchObjects",
            5: "searchObjectsResult",
            6: "getAllGameObjects",
            7: "getAllGameObjectsResult",
            8: "getGameObjectComponents",
            9: "getGameObjectComponentsResult",
            10: "readMemory",
            11: "readMemoryResult",
            12: "writeMemory",
            13: "writeMemoryResult"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])];
    }
    static fromObject(data: {
        queryResultId?: number;
        invokeMethod?: ReturnType<typeof InvokeMethod.prototype.toObject>;
        invokeMethodResult?: ReturnType<typeof InvokeMethodResult.prototype.toObject>;
        searchObjects?: ReturnType<typeof SearchObjects.prototype.toObject>;
        searchObjectsResult?: ReturnType<typeof SearchObjectsResult.prototype.toObject>;
        getAllGameObjects?: ReturnType<typeof GetAllGameObjects.prototype.toObject>;
        getAllGameObjectsResult?: ReturnType<typeof GetAllGameObjectsResult.prototype.toObject>;
        getGameObjectComponents?: ReturnType<typeof GetGameObjectComponents.prototype.toObject>;
        getGameObjectComponentsResult?: ReturnType<typeof GetGameObjectComponentsResult.prototype.toObject>;
        readMemory?: ReturnType<typeof ReadMemory.prototype.toObject>;
        readMemoryResult?: ReturnType<typeof ReadMemoryResult.prototype.toObject>;
        writeMemory?: ReturnType<typeof WriteMemory.prototype.toObject>;
        writeMemoryResult?: ReturnType<typeof WriteMemoryResult.prototype.toObject>;
    }): PacketWrapper {
        const message = new PacketWrapper({});
        if (data.queryResultId != null) {
            message.queryResultId = data.queryResultId;
        }
        if (data.invokeMethod != null) {
            message.invokeMethod = InvokeMethod.fromObject(data.invokeMethod);
        }
        if (data.invokeMethodResult != null) {
            message.invokeMethodResult = InvokeMethodResult.fromObject(data.invokeMethodResult);
        }
        if (data.searchObjects != null) {
            message.searchObjects = SearchObjects.fromObject(data.searchObjects);
        }
        if (data.searchObjectsResult != null) {
            message.searchObjectsResult = SearchObjectsResult.fromObject(data.searchObjectsResult);
        }
        if (data.getAllGameObjects != null) {
            message.getAllGameObjects = GetAllGameObjects.fromObject(data.getAllGameObjects);
        }
        if (data.getAllGameObjectsResult != null) {
            message.getAllGameObjectsResult = GetAllGameObjectsResult.fromObject(data.getAllGameObjectsResult);
        }
        if (data.getGameObjectComponents != null) {
            message.getGameObjectComponents = GetGameObjectComponents.fromObject(data.getGameObjectComponents);
        }
        if (data.getGameObjectComponentsResult != null) {
            message.getGameObjectComponentsResult = GetGameObjectComponentsResult.fromObject(data.getGameObjectComponentsResult);
        }
        if (data.readMemory != null) {
            message.readMemory = ReadMemory.fromObject(data.readMemory);
        }
        if (data.readMemoryResult != null) {
            message.readMemoryResult = ReadMemoryResult.fromObject(data.readMemoryResult);
        }
        if (data.writeMemory != null) {
            message.writeMemory = WriteMemory.fromObject(data.writeMemory);
        }
        if (data.writeMemoryResult != null) {
            message.writeMemoryResult = WriteMemoryResult.fromObject(data.writeMemoryResult);
        }
        return message;
    }
    toObject() {
        const data: {
            queryResultId?: number;
            invokeMethod?: ReturnType<typeof InvokeMethod.prototype.toObject>;
            invokeMethodResult?: ReturnType<typeof InvokeMethodResult.prototype.toObject>;
            searchObjects?: ReturnType<typeof SearchObjects.prototype.toObject>;
            searchObjectsResult?: ReturnType<typeof SearchObjectsResult.prototype.toObject>;
            getAllGameObjects?: ReturnType<typeof GetAllGameObjects.prototype.toObject>;
            getAllGameObjectsResult?: ReturnType<typeof GetAllGameObjectsResult.prototype.toObject>;
            getGameObjectComponents?: ReturnType<typeof GetGameObjectComponents.prototype.toObject>;
            getGameObjectComponentsResult?: ReturnType<typeof GetGameObjectComponentsResult.prototype.toObject>;
            readMemory?: ReturnType<typeof ReadMemory.prototype.toObject>;
            readMemoryResult?: ReturnType<typeof ReadMemoryResult.prototype.toObject>;
            writeMemory?: ReturnType<typeof WriteMemory.prototype.toObject>;
            writeMemoryResult?: ReturnType<typeof WriteMemoryResult.prototype.toObject>;
        } = {};
        if (this.queryResultId != null) {
            data.queryResultId = this.queryResultId;
        }
        if (this.invokeMethod != null) {
            data.invokeMethod = this.invokeMethod.toObject();
        }
        if (this.invokeMethodResult != null) {
            data.invokeMethodResult = this.invokeMethodResult.toObject();
        }
        if (this.searchObjects != null) {
            data.searchObjects = this.searchObjects.toObject();
        }
        if (this.searchObjectsResult != null) {
            data.searchObjectsResult = this.searchObjectsResult.toObject();
        }
        if (this.getAllGameObjects != null) {
            data.getAllGameObjects = this.getAllGameObjects.toObject();
        }
        if (this.getAllGameObjectsResult != null) {
            data.getAllGameObjectsResult = this.getAllGameObjectsResult.toObject();
        }
        if (this.getGameObjectComponents != null) {
            data.getGameObjectComponents = this.getGameObjectComponents.toObject();
        }
        if (this.getGameObjectComponentsResult != null) {
            data.getGameObjectComponentsResult = this.getGameObjectComponentsResult.toObject();
        }
        if (this.readMemory != null) {
            data.readMemory = this.readMemory.toObject();
        }
        if (this.readMemoryResult != null) {
            data.readMemoryResult = this.readMemoryResult.toObject();
        }
        if (this.writeMemory != null) {
            data.writeMemory = this.writeMemory.toObject();
        }
        if (this.writeMemoryResult != null) {
            data.writeMemoryResult = this.writeMemoryResult.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.queryResultId !== undefined)
            writer.writeUint64(1, this.queryResultId);
        if (this.invokeMethod !== undefined)
            writer.writeMessage(2, this.invokeMethod, () => this.invokeMethod.serialize(writer));
        if (this.invokeMethodResult !== undefined)
            writer.writeMessage(3, this.invokeMethodResult, () => this.invokeMethodResult.serialize(writer));
        if (this.searchObjects !== undefined)
            writer.writeMessage(4, this.searchObjects, () => this.searchObjects.serialize(writer));
        if (this.searchObjectsResult !== undefined)
            writer.writeMessage(5, this.searchObjectsResult, () => this.searchObjectsResult.serialize(writer));
        if (this.getAllGameObjects !== undefined)
            writer.writeMessage(6, this.getAllGameObjects, () => this.getAllGameObjects.serialize(writer));
        if (this.getAllGameObjectsResult !== undefined)
            writer.writeMessage(7, this.getAllGameObjectsResult, () => this.getAllGameObjectsResult.serialize(writer));
        if (this.getGameObjectComponents !== undefined)
            writer.writeMessage(8, this.getGameObjectComponents, () => this.getGameObjectComponents.serialize(writer));
        if (this.getGameObjectComponentsResult !== undefined)
            writer.writeMessage(9, this.getGameObjectComponentsResult, () => this.getGameObjectComponentsResult.serialize(writer));
        if (this.readMemory !== undefined)
            writer.writeMessage(10, this.readMemory, () => this.readMemory.serialize(writer));
        if (this.readMemoryResult !== undefined)
            writer.writeMessage(11, this.readMemoryResult, () => this.readMemoryResult.serialize(writer));
        if (this.writeMemory !== undefined)
            writer.writeMessage(12, this.writeMemory, () => this.writeMemory.serialize(writer));
        if (this.writeMemoryResult !== undefined)
            writer.writeMessage(13, this.writeMemoryResult, () => this.writeMemoryResult.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketWrapper {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketWrapper();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.queryResultId = reader.readUint64();
                    break;
                case 2:
                    reader.readMessage(message.invokeMethod, () => message.invokeMethod = InvokeMethod.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.invokeMethodResult, () => message.invokeMethodResult = InvokeMethodResult.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.searchObjects, () => message.searchObjects = SearchObjects.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.searchObjectsResult, () => message.searchObjectsResult = SearchObjectsResult.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.getAllGameObjects, () => message.getAllGameObjects = GetAllGameObjects.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.getAllGameObjectsResult, () => message.getAllGameObjectsResult = GetAllGameObjectsResult.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.getGameObjectComponents, () => message.getGameObjectComponents = GetGameObjectComponents.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.getGameObjectComponentsResult, () => message.getGameObjectComponentsResult = GetGameObjectComponentsResult.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.readMemory, () => message.readMemory = ReadMemory.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.readMemoryResult, () => message.readMemoryResult = ReadMemoryResult.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.writeMemory, () => message.writeMemory = WriteMemory.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.writeMemoryResult, () => message.writeMemoryResult = WriteMemoryResult.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PacketWrapper {
        return PacketWrapper.deserialize(bytes);
    }
}
