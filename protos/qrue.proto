syntax = "proto3";

// Type Identification
message ClassInfoMsg {
    string namespaze = 1;
    string clazz = 2;
    repeated ClassInfoMsg generics = 3;
}

message StructInfoMsg {
    ClassInfoMsg clazz = 1;

    map<int32, TypeInfoMsg> contents = 2;
}

message TypeInfoMsg {
    enum Type {
        PRIMITIVE = 0;
        STRUCT = 1;
        CLASS = 2;
    }
    enum Primitive {
        BOOLEAN = 0;
        CHAR = 1;
        INT = 2;
        LONG = 3;
        FLOAT = 4;
        DOUBLE = 5;
        STRING = 6;
    }
    Type type = 1;
    oneof Info {
        Primitive primitiveInfo = 2;
        StructInfoMsg structInfo = 3;
        ClassInfoMsg classInfo = 4;
    }
}

// Type Details
message FieldInfoMsg {
    string name = 1;
    uint64 id = 2;
    TypeInfoMsg type = 3;
}

message PropertyInfoMsg {
    string name = 1;
    bool hasGet = 2;
    uint64 getId = 3;
    bool hasSet = 4;
    uint64 setId = 5;
    TypeInfoMsg type = 6;
}

message MethodInfoMsg {
    string name = 1;
    uint64 id = 2;

    map<string, TypeInfoMsg> args = 3;
    TypeInfoMsg returnType = 4;
}

message TypeDetailsMsg {
    ClassInfoMsg clazz = 1;

    repeated FieldInfoMsg fields = 2;
    repeated PropertyInfoMsg properties = 3;
    repeated MethodInfoMsg methods = 4;
    
    repeated ClassInfoMsg interfaces = 5; /* nullable */

    TypeDetailsMsg parent = 6; /* nullable */
}

// Data Sending
message DataMsg {
    TypeInfoMsg typeInfo = 1; /* nullable */

    bytes data = 2;
}

// COMMAND/QUERY PACKETS

message InvokeMethod {
    uint64 methodId = 1;
    uint64 invokeUUID = 2;
    repeated DataMsg args = 3;
}

message InvokeMethodResult {
    enum Status {
        OK = 0;
        ERR = 1;
        NOT_FOUND = 2;
    }
    Status status = 1;
    uint64 methodId = 2;
    uint64 invokeUUID = 3;
    DataMsg result = 4;
    string error = 5; /* nullable */
}

message SearchObjects {
    uint64 queryId = 1;
    string objectName = 2; /* nullable */
    ClassInfoMsg requiredComponent = 3; /* nullable */
}

message SearchObjectsResult {
    uint64 queryId = 1;
    // TODO: Make a GameObject type with all the data
    repeated string foundObjects = 2;
}

// ???
message LoadObject {
    uint64 loadId = 1;
    bytes pointer = 2;
}

message LoadObjectResult {
    uint64 loadId = 1;
    TypeDetailsMsg object = 2;
}

// TODO: Rename?
message PacketWrapper {
    oneof Packet {
        InvokeMethod invokeMethod = 1;
        InvokeMethodResult invokeMethodResult = 2;
        SearchObjects searchObjects = 3;
        SearchObjectsResult searchObjectsResult = 4;
        LoadObject loadObject = 5;
        LoadObjectResult loadObjectResult = 6;
    }
}