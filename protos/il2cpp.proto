syntax = "proto3";

// optional = nullable
// may change in future!

// Type Identification
message ProtoClassInfo {
    string namespaze = 1;
    string clazz = 2;
    repeated ProtoTypeInfo generics = 3;
}

message ProtoStructInfo {
    ProtoClassInfo clazz = 1;

    map<int32, ProtoFieldInfo> fieldOffsets = 2;
}

message ProtoArrayInfo {
    ProtoTypeInfo memberType = 1;
}

message ProtoGenericInfo {
    int32 genericIndex = 1;
    string name = 2;
}

message ProtoTypeInfo {
    enum Primitive { // TODO: maybe add more primitives
        BOOLEAN = 0;
        CHAR = 1;
        BYTE = 2;
        SHORT = 3;
        INT = 4;
        LONG = 5;
        FLOAT = 6;
        DOUBLE = 7;
        STRING = 8;
        TYPE = 9;
        PTR = 10; // TODO: maybe separate and add pointed to type
        VOID = 11;
        UNKNOWN = 12;
    }
    oneof Info {
        Primitive primitiveInfo = 1;
        ProtoArrayInfo arrayInfo = 2;
        ProtoStructInfo structInfo = 3;
        ProtoClassInfo classInfo = 4;
        ProtoGenericInfo genericInfo = 5;
    }
    int32 size = 6;
    bool isByref = 7;
}

// Type Details
// id = pointer address of info
message ProtoFieldInfo {
    string name = 1;
    uint64 id = 2;
    ProtoTypeInfo type = 3;
    // means the field cannot be set
    bool literal = 4;
}

message ProtoPropertyInfo {
    string name = 1;
    optional uint64 getterId = 2; /* nullable */
    optional uint64 setterId = 3; /* nullable */
    optional uint64 backingFieldId = 4; /* nullable */
    ProtoTypeInfo type = 5;
}

message ProtoMethodInfo {
    message Argument {
        string name = 1;
        ProtoTypeInfo type = 2;
    }

    string name = 1;
    uint64 id = 2;

    repeated Argument args = 3;
    ProtoTypeInfo returnType = 4;
}

/// Contains the class data in its entirety
// NOT APPLICABLE TO PRIMITIVES
message ProtoClassDetails {
    ProtoClassInfo clazz = 1;

    repeated ProtoFieldInfo fields = 2;
    repeated ProtoPropertyInfo properties = 3;
    repeated ProtoMethodInfo methods = 4;

    repeated ProtoFieldInfo staticFields = 5;
    repeated ProtoPropertyInfo staticProperties = 6;
    repeated ProtoMethodInfo staticMethods = 7;

    repeated ProtoClassInfo interfaces = 8; /* nullable */

    optional ProtoClassDetails parent = 9; /* nullable */
}

// separate from payload because the typeInfo never needs to be nested
message ProtoDataSegment {
    // repeated fields aren't allowed directly in oneOf
    message ArrayData {
        repeated ProtoDataSegment data = 1;
    }
    message StructData {
        map<int32, ProtoDataSegment> data = 1;
    }

    oneof Data {
        bytes primitiveData = 1; /* simpler than having another oneof for each primitive case */
        ArrayData arrayData = 2;
        StructData structData = 3;
        uint64 classData = 4; /* object pointer */
        bytes genericData = 5; /* shouldn't come up */
    }
}

// Data Sending
message ProtoDataPayload {
    optional ProtoTypeInfo typeInfo = 1; /* nullable */

    ProtoDataSegment data = 2;
}
