// This file is generated by rust-protobuf 2.27.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `qrue.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_27_1;

#[derive(PartialEq,Clone,Default)]
pub struct Il2CPPData {
    // message fields
    pub field_type: ::std::string::String,
    pub data: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Il2CPPData {
    fn default() -> &'a Il2CPPData {
        <Il2CPPData as ::protobuf::Message>::default_instance()
    }
}

impl Il2CPPData {
    pub fn new() -> Il2CPPData {
        ::std::default::Default::default()
    }

    // string type = 1;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // bytes data = 2;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Il2CPPData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.field_type);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.field_type.is_empty() {
            os.write_string(1, &self.field_type)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(2, &self.data)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Il2CPPData {
        Il2CPPData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &Il2CPPData| { &m.field_type },
                |m: &mut Il2CPPData| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &Il2CPPData| { &m.data },
                |m: &mut Il2CPPData| { &mut m.data },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Il2CPPData>(
                "Il2CPPData",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Il2CPPData {
        static instance: ::protobuf::rt::LazyV2<Il2CPPData> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Il2CPPData::new)
    }
}

impl ::protobuf::Clear for Il2CPPData {
    fn clear(&mut self) {
        self.field_type.clear();
        self.data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Il2CPPData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Il2CPPData {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InvokeMethod {
    // message fields
    pub methodId: u64,
    pub invokeUUID: u64,
    pub args: ::protobuf::RepeatedField<Il2CPPData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InvokeMethod {
    fn default() -> &'a InvokeMethod {
        <InvokeMethod as ::protobuf::Message>::default_instance()
    }
}

impl InvokeMethod {
    pub fn new() -> InvokeMethod {
        ::std::default::Default::default()
    }

    // uint64 methodId = 1;


    pub fn get_methodId(&self) -> u64 {
        self.methodId
    }
    pub fn clear_methodId(&mut self) {
        self.methodId = 0;
    }

    // Param is passed by value, moved
    pub fn set_methodId(&mut self, v: u64) {
        self.methodId = v;
    }

    // uint64 invokeUUID = 2;


    pub fn get_invokeUUID(&self) -> u64 {
        self.invokeUUID
    }
    pub fn clear_invokeUUID(&mut self) {
        self.invokeUUID = 0;
    }

    // Param is passed by value, moved
    pub fn set_invokeUUID(&mut self, v: u64) {
        self.invokeUUID = v;
    }

    // repeated .Il2CPPData args = 3;


    pub fn get_args(&self) -> &[Il2CPPData] {
        &self.args
    }
    pub fn clear_args(&mut self) {
        self.args.clear();
    }

    // Param is passed by value, moved
    pub fn set_args(&mut self, v: ::protobuf::RepeatedField<Il2CPPData>) {
        self.args = v;
    }

    // Mutable pointer to the field.
    pub fn mut_args(&mut self) -> &mut ::protobuf::RepeatedField<Il2CPPData> {
        &mut self.args
    }

    // Take field
    pub fn take_args(&mut self) -> ::protobuf::RepeatedField<Il2CPPData> {
        ::std::mem::replace(&mut self.args, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for InvokeMethod {
    fn is_initialized(&self) -> bool {
        for v in &self.args {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.methodId = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.invokeUUID = tmp;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.args)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.methodId != 0 {
            my_size += ::protobuf::rt::value_size(1, self.methodId, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.invokeUUID != 0 {
            my_size += ::protobuf::rt::value_size(2, self.invokeUUID, ::protobuf::wire_format::WireTypeVarint);
        }
        for value in &self.args {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.methodId != 0 {
            os.write_uint64(1, self.methodId)?;
        }
        if self.invokeUUID != 0 {
            os.write_uint64(2, self.invokeUUID)?;
        }
        for v in &self.args {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InvokeMethod {
        InvokeMethod::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "methodId",
                |m: &InvokeMethod| { &m.methodId },
                |m: &mut InvokeMethod| { &mut m.methodId },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "invokeUUID",
                |m: &InvokeMethod| { &m.invokeUUID },
                |m: &mut InvokeMethod| { &mut m.invokeUUID },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Il2CPPData>>(
                "args",
                |m: &InvokeMethod| { &m.args },
                |m: &mut InvokeMethod| { &mut m.args },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InvokeMethod>(
                "InvokeMethod",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InvokeMethod {
        static instance: ::protobuf::rt::LazyV2<InvokeMethod> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InvokeMethod::new)
    }
}

impl ::protobuf::Clear for InvokeMethod {
    fn clear(&mut self) {
        self.methodId = 0;
        self.invokeUUID = 0;
        self.args.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InvokeMethod {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InvokeMethod {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InvokeMethodResult {
    // message fields
    pub status: InvokeMethodResult_Status,
    pub invokeUUID: u64,
    pub result: ::protobuf::SingularPtrField<Il2CPPData>,
    pub error: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InvokeMethodResult {
    fn default() -> &'a InvokeMethodResult {
        <InvokeMethodResult as ::protobuf::Message>::default_instance()
    }
}

impl InvokeMethodResult {
    pub fn new() -> InvokeMethodResult {
        ::std::default::Default::default()
    }

    // .InvokeMethodResult.Status status = 1;


    pub fn get_status(&self) -> InvokeMethodResult_Status {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = InvokeMethodResult_Status::OK;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: InvokeMethodResult_Status) {
        self.status = v;
    }

    // uint64 invokeUUID = 2;


    pub fn get_invokeUUID(&self) -> u64 {
        self.invokeUUID
    }
    pub fn clear_invokeUUID(&mut self) {
        self.invokeUUID = 0;
    }

    // Param is passed by value, moved
    pub fn set_invokeUUID(&mut self, v: u64) {
        self.invokeUUID = v;
    }

    // .Il2CPPData result = 3;


    pub fn get_result(&self) -> &Il2CPPData {
        self.result.as_ref().unwrap_or_else(|| <Il2CPPData as ::protobuf::Message>::default_instance())
    }
    pub fn clear_result(&mut self) {
        self.result.clear();
    }

    pub fn has_result(&self) -> bool {
        self.result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: Il2CPPData) {
        self.result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result(&mut self) -> &mut Il2CPPData {
        if self.result.is_none() {
            self.result.set_default();
        }
        self.result.as_mut().unwrap()
    }

    // Take field
    pub fn take_result(&mut self) -> Il2CPPData {
        self.result.take().unwrap_or_else(|| Il2CPPData::new())
    }

    // string error = 4;


    pub fn get_error(&self) -> &str {
        &self.error
    }
    pub fn clear_error(&mut self) {
        self.error.clear();
    }

    // Param is passed by value, moved
    pub fn set_error(&mut self, v: ::std::string::String) {
        self.error = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_error(&mut self) -> &mut ::std::string::String {
        &mut self.error
    }

    // Take field
    pub fn take_error(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.error, ::std::string::String::new())
    }
}

impl ::protobuf::Message for InvokeMethodResult {
    fn is_initialized(&self) -> bool {
        for v in &self.result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.invokeUUID = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.result)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.error)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != InvokeMethodResult_Status::OK {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if self.invokeUUID != 0 {
            my_size += ::protobuf::rt::value_size(2, self.invokeUUID, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.error.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.error);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != InvokeMethodResult_Status::OK {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if self.invokeUUID != 0 {
            os.write_uint64(2, self.invokeUUID)?;
        }
        if let Some(ref v) = self.result.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.error.is_empty() {
            os.write_string(4, &self.error)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InvokeMethodResult {
        InvokeMethodResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InvokeMethodResult_Status>>(
                "status",
                |m: &InvokeMethodResult| { &m.status },
                |m: &mut InvokeMethodResult| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "invokeUUID",
                |m: &InvokeMethodResult| { &m.invokeUUID },
                |m: &mut InvokeMethodResult| { &mut m.invokeUUID },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Il2CPPData>>(
                "result",
                |m: &InvokeMethodResult| { &m.result },
                |m: &mut InvokeMethodResult| { &mut m.result },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "error",
                |m: &InvokeMethodResult| { &m.error },
                |m: &mut InvokeMethodResult| { &mut m.error },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InvokeMethodResult>(
                "InvokeMethodResult",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InvokeMethodResult {
        static instance: ::protobuf::rt::LazyV2<InvokeMethodResult> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InvokeMethodResult::new)
    }
}

impl ::protobuf::Clear for InvokeMethodResult {
    fn clear(&mut self) {
        self.status = InvokeMethodResult_Status::OK;
        self.invokeUUID = 0;
        self.result.clear();
        self.error.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InvokeMethodResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InvokeMethodResult {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum InvokeMethodResult_Status {
    OK = 0,
    ERR = 1,
    NOT_FOUND = 2,
}

impl ::protobuf::ProtobufEnum for InvokeMethodResult_Status {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InvokeMethodResult_Status> {
        match value {
            0 => ::std::option::Option::Some(InvokeMethodResult_Status::OK),
            1 => ::std::option::Option::Some(InvokeMethodResult_Status::ERR),
            2 => ::std::option::Option::Some(InvokeMethodResult_Status::NOT_FOUND),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [InvokeMethodResult_Status] = &[
            InvokeMethodResult_Status::OK,
            InvokeMethodResult_Status::ERR,
            InvokeMethodResult_Status::NOT_FOUND,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<InvokeMethodResult_Status>("InvokeMethodResult.Status", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for InvokeMethodResult_Status {
}

impl ::std::default::Default for InvokeMethodResult_Status {
    fn default() -> Self {
        InvokeMethodResult_Status::OK
    }
}

impl ::protobuf::reflect::ProtobufValue for InvokeMethodResult_Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nqrue.proto\"4\n\nIl2CPPData\x12\x12\n\x04type\x18\x01\x20\x01(\tR\
    \x04type\x12\x12\n\x04data\x18\x02\x20\x01(\x0cR\x04data\"k\n\x0cInvokeM\
    ethod\x12\x1a\n\x08methodId\x18\x01\x20\x01(\x04R\x08methodId\x12\x1e\n\
    \ninvokeUUID\x18\x02\x20\x01(\x04R\ninvokeUUID\x12\x1f\n\x04args\x18\x03\
    \x20\x03(\x0b2\x0b.Il2CPPDataR\x04args\"\xcd\x01\n\x12InvokeMethodResult\
    \x122\n\x06status\x18\x01\x20\x01(\x0e2\x1a.InvokeMethodResult.StatusR\
    \x06status\x12\x1e\n\ninvokeUUID\x18\x02\x20\x01(\x04R\ninvokeUUID\x12#\
    \n\x06result\x18\x03\x20\x01(\x0b2\x0b.Il2CPPDataR\x06result\x12\x14\n\
    \x05error\x18\x04\x20\x01(\tR\x05error\"(\n\x06Status\x12\x06\n\x02OK\
    \x10\0\x12\x07\n\x03ERR\x10\x01\x12\r\n\tNOT_FOUND\x10\x02b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
